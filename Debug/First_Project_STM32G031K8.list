
First_Project_STM32G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003874  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039fc  080039fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a04  08003a04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a08  08003a08  00013a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08003a18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003a18  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e08  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ae  00000000  00000000  00030e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00032ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00033c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ef4  00000000  00000000  000348e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010706  00000000  00000000  0004a7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e145  00000000  00000000  0005aee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9027  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fd4  00000000  00000000  000e907c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003918 	.word	0x08003918

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003918 	.word	0x08003918

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	1c08      	adds	r0, r1, #0
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	; (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	; (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	469b      	mov	fp, r3
 8000292:	d433      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000294:	465a      	mov	r2, fp
 8000296:	4653      	mov	r3, sl
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83a      	bhi.n	800031e <__udivmoddi4+0xc2>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e078      	b.n	80003a0 <__udivmoddi4+0x144>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e075      	b.n	80003a6 <__udivmoddi4+0x14a>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e028      	b.n	8000326 <__udivmoddi4+0xca>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	2320      	movs	r3, #32
 8000300:	1a9b      	subs	r3, r3, r2
 8000302:	4652      	mov	r2, sl
 8000304:	40da      	lsrs	r2, r3
 8000306:	4641      	mov	r1, r8
 8000308:	0013      	movs	r3, r2
 800030a:	464a      	mov	r2, r9
 800030c:	408a      	lsls	r2, r1
 800030e:	0017      	movs	r7, r2
 8000310:	4642      	mov	r2, r8
 8000312:	431f      	orrs	r7, r3
 8000314:	4653      	mov	r3, sl
 8000316:	4093      	lsls	r3, r2
 8000318:	001e      	movs	r6, r3
 800031a:	42af      	cmp	r7, r5
 800031c:	d9c4      	bls.n	80002a8 <__udivmoddi4+0x4c>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	4643      	mov	r3, r8
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0d9      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032c:	07fb      	lsls	r3, r7, #31
 800032e:	0872      	lsrs	r2, r6, #1
 8000330:	431a      	orrs	r2, r3
 8000332:	4646      	mov	r6, r8
 8000334:	087b      	lsrs	r3, r7, #1
 8000336:	e00e      	b.n	8000356 <__udivmoddi4+0xfa>
 8000338:	42ab      	cmp	r3, r5
 800033a:	d101      	bne.n	8000340 <__udivmoddi4+0xe4>
 800033c:	42a2      	cmp	r2, r4
 800033e:	d80c      	bhi.n	800035a <__udivmoddi4+0xfe>
 8000340:	1aa4      	subs	r4, r4, r2
 8000342:	419d      	sbcs	r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	1924      	adds	r4, r4, r4
 8000348:	416d      	adcs	r5, r5
 800034a:	2100      	movs	r1, #0
 800034c:	3e01      	subs	r6, #1
 800034e:	1824      	adds	r4, r4, r0
 8000350:	414d      	adcs	r5, r1
 8000352:	2e00      	cmp	r6, #0
 8000354:	d006      	beq.n	8000364 <__udivmoddi4+0x108>
 8000356:	42ab      	cmp	r3, r5
 8000358:	d9ee      	bls.n	8000338 <__udivmoddi4+0xdc>
 800035a:	3e01      	subs	r6, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2e00      	cmp	r6, #0
 8000362:	d1f8      	bne.n	8000356 <__udivmoddi4+0xfa>
 8000364:	9800      	ldr	r0, [sp, #0]
 8000366:	9901      	ldr	r1, [sp, #4]
 8000368:	465b      	mov	r3, fp
 800036a:	1900      	adds	r0, r0, r4
 800036c:	4169      	adcs	r1, r5
 800036e:	2b00      	cmp	r3, #0
 8000370:	db24      	blt.n	80003bc <__udivmoddi4+0x160>
 8000372:	002b      	movs	r3, r5
 8000374:	465a      	mov	r2, fp
 8000376:	4644      	mov	r4, r8
 8000378:	40d3      	lsrs	r3, r2
 800037a:	002a      	movs	r2, r5
 800037c:	40e2      	lsrs	r2, r4
 800037e:	001c      	movs	r4, r3
 8000380:	465b      	mov	r3, fp
 8000382:	0015      	movs	r5, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	db2a      	blt.n	80003de <__udivmoddi4+0x182>
 8000388:	0026      	movs	r6, r4
 800038a:	409e      	lsls	r6, r3
 800038c:	0033      	movs	r3, r6
 800038e:	0026      	movs	r6, r4
 8000390:	4647      	mov	r7, r8
 8000392:	40be      	lsls	r6, r7
 8000394:	0032      	movs	r2, r6
 8000396:	1a80      	subs	r0, r0, r2
 8000398:	4199      	sbcs	r1, r3
 800039a:	9000      	str	r0, [sp, #0]
 800039c:	9101      	str	r1, [sp, #4]
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a0:	42a3      	cmp	r3, r4
 80003a2:	d8bc      	bhi.n	800031e <__udivmoddi4+0xc2>
 80003a4:	e783      	b.n	80002ae <__udivmoddi4+0x52>
 80003a6:	4642      	mov	r2, r8
 80003a8:	2320      	movs	r3, #32
 80003aa:	2100      	movs	r1, #0
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	2200      	movs	r2, #0
 80003b0:	9100      	str	r1, [sp, #0]
 80003b2:	9201      	str	r2, [sp, #4]
 80003b4:	2201      	movs	r2, #1
 80003b6:	40da      	lsrs	r2, r3
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	e786      	b.n	80002ca <__udivmoddi4+0x6e>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	002a      	movs	r2, r5
 80003c4:	4646      	mov	r6, r8
 80003c6:	409a      	lsls	r2, r3
 80003c8:	0023      	movs	r3, r4
 80003ca:	40f3      	lsrs	r3, r6
 80003cc:	4644      	mov	r4, r8
 80003ce:	4313      	orrs	r3, r2
 80003d0:	002a      	movs	r2, r5
 80003d2:	40e2      	lsrs	r2, r4
 80003d4:	001c      	movs	r4, r3
 80003d6:	465b      	mov	r3, fp
 80003d8:	0015      	movs	r5, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	dad4      	bge.n	8000388 <__udivmoddi4+0x12c>
 80003de:	4642      	mov	r2, r8
 80003e0:	002f      	movs	r7, r5
 80003e2:	2320      	movs	r3, #32
 80003e4:	0026      	movs	r6, r4
 80003e6:	4097      	lsls	r7, r2
 80003e8:	1a9b      	subs	r3, r3, r2
 80003ea:	40de      	lsrs	r6, r3
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7cd      	b.n	800038e <__udivmoddi4+0x132>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	1c08      	adds	r0, r1, #0
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b089      	sub	sp, #36	; 0x24
 800044c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	240c      	movs	r4, #12
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2314      	movs	r3, #20
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f003 fa55 	bl	8003908 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045e:	4b28      	ldr	r3, [pc, #160]	; (8000500 <MX_GPIO_Init+0xb8>)
 8000460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000462:	4b27      	ldr	r3, [pc, #156]	; (8000500 <MX_GPIO_Init+0xb8>)
 8000464:	2104      	movs	r1, #4
 8000466:	430a      	orrs	r2, r1
 8000468:	635a      	str	r2, [r3, #52]	; 0x34
 800046a:	4b25      	ldr	r3, [pc, #148]	; (8000500 <MX_GPIO_Init+0xb8>)
 800046c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800046e:	2204      	movs	r2, #4
 8000470:	4013      	ands	r3, r2
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000476:	4b22      	ldr	r3, [pc, #136]	; (8000500 <MX_GPIO_Init+0xb8>)
 8000478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800047a:	4b21      	ldr	r3, [pc, #132]	; (8000500 <MX_GPIO_Init+0xb8>)
 800047c:	2120      	movs	r1, #32
 800047e:	430a      	orrs	r2, r1
 8000480:	635a      	str	r2, [r3, #52]	; 0x34
 8000482:	4b1f      	ldr	r3, [pc, #124]	; (8000500 <MX_GPIO_Init+0xb8>)
 8000484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000486:	2220      	movs	r2, #32
 8000488:	4013      	ands	r3, r2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <MX_GPIO_Init+0xb8>)
 8000490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000492:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <MX_GPIO_Init+0xb8>)
 8000494:	2101      	movs	r1, #1
 8000496:	430a      	orrs	r2, r1
 8000498:	635a      	str	r2, [r3, #52]	; 0x34
 800049a:	4b19      	ldr	r3, [pc, #100]	; (8000500 <MX_GPIO_Init+0xb8>)
 800049c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800049e:	2201      	movs	r2, #1
 80004a0:	4013      	ands	r3, r2
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <MX_GPIO_Init+0xbc>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	2140      	movs	r1, #64	; 0x40
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 fdb9 	bl	8001024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2204      	movs	r2, #4
 80004b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2288      	movs	r2, #136	; 0x88
 80004bc:	0352      	lsls	r2, r2, #13
 80004be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	4a0f      	ldr	r2, [pc, #60]	; (8000508 <MX_GPIO_Init+0xc0>)
 80004ca:	0019      	movs	r1, r3
 80004cc:	0010      	movs	r0, r2
 80004ce:	f000 fc45 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80004d2:	0021      	movs	r1, r4
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2240      	movs	r2, #64	; 0x40
 80004d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2201      	movs	r2, #1
 80004de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	4a05      	ldr	r2, [pc, #20]	; (8000504 <MX_GPIO_Init+0xbc>)
 80004f0:	0019      	movs	r1, r3
 80004f2:	0010      	movs	r0, r2
 80004f4:	f000 fc32 	bl	8000d5c <HAL_GPIO_Init>

}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b009      	add	sp, #36	; 0x24
 80004fe:	bd90      	pop	{r4, r7, pc}
 8000500:	40021000 	.word	0x40021000
 8000504:	50000800 	.word	0x50000800
 8000508:	50001400 	.word	0x50001400

0800050c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	  static uint16_t Contador_Ms = 0;

	  if(htim->Instance == TIM1)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d114      	bne.n	8000548 <HAL_TIM_PeriodElapsedCallback+0x3c>
	   {
		   Contador_Ms++;
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	3301      	adds	r3, #1
 8000524:	b29a      	uxth	r2, r3
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000528:	801a      	strh	r2, [r3, #0]
		   if (Contador_Ms == Contagem_Maxima)
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800052c:	881a      	ldrh	r2, [r3, #0]
 800052e:	23fa      	movs	r3, #250	; 0xfa
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	429a      	cmp	r2, r3
 8000534:	d108      	bne.n	8000548 <HAL_TIM_PeriodElapsedCallback+0x3c>
		   {
			   Contador_Segundos++;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	b29a      	uxth	r2, r3
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000540:	801a      	strh	r2, [r3, #0]
			   Contador_Ms = 0;
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000544:	2200      	movs	r2, #0
 8000546:	801a      	strh	r2, [r3, #0]
		   }
	   }
}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b002      	add	sp, #8
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40012c00 	.word	0x40012c00
 8000554:	20000028 	.word	0x20000028
 8000558:	2000002a 	.word	0x2000002a

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f000 fa98 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f838 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f7ff ff6e 	bl	8000448 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800056c:	f000 f9ea 	bl	8000944 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000570:	f000 f8da 	bl	8000728 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

//  HAL_TIM_Base_Start(&htim1);
  HAL_TIM_Base_Start_IT(&htim1);
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <main+0x70>)
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fc5a 	bl	8001e30 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (Contador_Segundos < Contagem_Minima_LED)
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <main+0x74>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d806      	bhi.n	8000592 <main+0x36>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <main+0x78>)
 8000586:	2200      	movs	r2, #0
 8000588:	2140      	movs	r1, #64	; 0x40
 800058a:	0018      	movs	r0, r3
 800058c:	f000 fd4a 	bl	8001024 <HAL_GPIO_WritePin>
 8000590:	e7f4      	b.n	800057c <main+0x20>
	  }
	  else if (Contador_Segundos >= Contagem_Minima_LED && Contador_Segundos < Contagem_Maxima_LED)
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <main+0x74>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d90a      	bls.n	80005b0 <main+0x54>
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <main+0x74>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	2b03      	cmp	r3, #3
 80005a0:	d806      	bhi.n	80005b0 <main+0x54>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <main+0x78>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 fd3b 	bl	8001024 <HAL_GPIO_WritePin>
 80005ae:	e00c      	b.n	80005ca <main+0x6e>
	  }
	  else if (Contador_Segundos >= Contagem_Maxima_LED)
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <main+0x74>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d9e1      	bls.n	800057c <main+0x20>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <main+0x78>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	2140      	movs	r1, #64	; 0x40
 80005be:	0018      	movs	r0, r3
 80005c0:	f000 fd30 	bl	8001024 <HAL_GPIO_WritePin>
		  Contador_Segundos = 0;
 80005c4:	4b02      	ldr	r3, [pc, #8]	; (80005d0 <main+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
	  if (Contador_Segundos < Contagem_Minima_LED)
 80005ca:	e7d7      	b.n	800057c <main+0x20>
 80005cc:	2000002c 	.word	0x2000002c
 80005d0:	2000002a 	.word	0x2000002a
 80005d4:	50000800 	.word	0x50000800

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b093      	sub	sp, #76	; 0x4c
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	2410      	movs	r4, #16
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	0018      	movs	r0, r3
 80005e4:	2338      	movs	r3, #56	; 0x38
 80005e6:	001a      	movs	r2, r3
 80005e8:	2100      	movs	r1, #0
 80005ea:	f003 f98d 	bl	8003908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ee:	003b      	movs	r3, r7
 80005f0:	0018      	movs	r0, r3
 80005f2:	2310      	movs	r3, #16
 80005f4:	001a      	movs	r2, r3
 80005f6:	2100      	movs	r1, #0
 80005f8:	f003 f986 	bl	8003908 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fd2d 	bl	8001060 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2202      	movs	r2, #2
 800060a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	0052      	lsls	r2, r2, #1
 8000612:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000614:	193b      	adds	r3, r7, r4
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	193b      	adds	r3, r7, r4
 800061c:	2240      	movs	r2, #64	; 0x40
 800061e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	193b      	adds	r3, r7, r4
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fd65 	bl	80010f8 <HAL_RCC_OscConfig>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000632:	f000 f819 	bl	8000668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	003b      	movs	r3, r7
 8000638:	2207      	movs	r2, #7
 800063a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800063c:	003b      	movs	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	003b      	movs	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	003b      	movs	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064e:	003b      	movs	r3, r7
 8000650:	2100      	movs	r1, #0
 8000652:	0018      	movs	r0, r3
 8000654:	f001 f870 	bl	8001738 <HAL_RCC_ClockConfig>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800065c:	f000 f804 	bl	8000668 <Error_Handler>
  }
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b013      	add	sp, #76	; 0x4c
 8000666:	bd90      	pop	{r4, r7, pc}

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	e7fe      	b.n	8000670 <Error_Handler+0x8>
	...

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_MspInit+0x44>)
 800067c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <HAL_MspInit+0x44>)
 8000680:	2101      	movs	r1, #1
 8000682:	430a      	orrs	r2, r1
 8000684:	641a      	str	r2, [r3, #64]	; 0x40
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_MspInit+0x44>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	2201      	movs	r2, #1
 800068c:	4013      	ands	r3, r2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_MspInit+0x44>)
 8000694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HAL_MspInit+0x44>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	0549      	lsls	r1, r1, #21
 800069c:	430a      	orrs	r2, r1
 800069e:	63da      	str	r2, [r3, #60]	; 0x3c
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <HAL_MspInit+0x44>)
 80006a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	055b      	lsls	r3, r3, #21
 80006a8:	4013      	ands	r3, r2
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	40021000 	.word	0x40021000

080006bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <NMI_Handler+0x4>

080006c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <HardFault_Handler+0x4>

080006c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e0:	f000 fa42 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 fc50 	bl	8001f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	2000002c 	.word	0x2000002c

08000704 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <TIM1_CC_IRQHandler+0x14>)
 800070a:	0018      	movs	r0, r3
 800070c:	f001 fc44 	bl	8001f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	2000002c 	.word	0x2000002c

0800071c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b09c      	sub	sp, #112	; 0x70
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	2360      	movs	r3, #96	; 0x60
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	0018      	movs	r0, r3
 8000734:	2310      	movs	r3, #16
 8000736:	001a      	movs	r2, r3
 8000738:	2100      	movs	r1, #0
 800073a:	f003 f8e5 	bl	8003908 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073e:	2354      	movs	r3, #84	; 0x54
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	0018      	movs	r0, r3
 8000744:	230c      	movs	r3, #12
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f003 f8dd 	bl	8003908 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074e:	2338      	movs	r3, #56	; 0x38
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	0018      	movs	r0, r3
 8000754:	231c      	movs	r3, #28
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f003 f8d5 	bl	8003908 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	0018      	movs	r0, r3
 8000762:	2334      	movs	r3, #52	; 0x34
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f003 f8ce 	bl	8003908 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800076c:	4b4f      	ldr	r3, [pc, #316]	; (80008ac <MX_TIM1_Init+0x184>)
 800076e:	4a50      	ldr	r2, [pc, #320]	; (80008b0 <MX_TIM1_Init+0x188>)
 8000770:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000772:	4b4e      	ldr	r3, [pc, #312]	; (80008ac <MX_TIM1_Init+0x184>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b4c      	ldr	r3, [pc, #304]	; (80008ac <MX_TIM1_Init+0x184>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 15999;
 800077e:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <MX_TIM1_Init+0x184>)
 8000780:	4a4c      	ldr	r2, [pc, #304]	; (80008b4 <MX_TIM1_Init+0x18c>)
 8000782:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b49      	ldr	r3, [pc, #292]	; (80008ac <MX_TIM1_Init+0x184>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800078a:	4b48      	ldr	r3, [pc, #288]	; (80008ac <MX_TIM1_Init+0x184>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b46      	ldr	r3, [pc, #280]	; (80008ac <MX_TIM1_Init+0x184>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000796:	4b45      	ldr	r3, [pc, #276]	; (80008ac <MX_TIM1_Init+0x184>)
 8000798:	0018      	movs	r0, r3
 800079a:	f001 faf1 	bl	8001d80 <HAL_TIM_Base_Init>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80007a2:	f7ff ff61 	bl	8000668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a6:	2160      	movs	r1, #96	; 0x60
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	0152      	lsls	r2, r2, #5
 80007ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007b0:	187a      	adds	r2, r7, r1
 80007b2:	4b3e      	ldr	r3, [pc, #248]	; (80008ac <MX_TIM1_Init+0x184>)
 80007b4:	0011      	movs	r1, r2
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 fe16 	bl	80023e8 <HAL_TIM_ConfigClockSource>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80007c0:	f7ff ff52 	bl	8000668 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007c4:	4b39      	ldr	r3, [pc, #228]	; (80008ac <MX_TIM1_Init+0x184>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 fb86 	bl	8001ed8 <HAL_TIM_PWM_Init>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80007d0:	f7ff ff4a 	bl	8000668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d4:	2154      	movs	r1, #84	; 0x54
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e8:	187a      	adds	r2, r7, r1
 80007ea:	4b30      	ldr	r3, [pc, #192]	; (80008ac <MX_TIM1_Init+0x184>)
 80007ec:	0011      	movs	r1, r2
 80007ee:	0018      	movs	r0, r3
 80007f0:	f002 fa94 	bl	8002d1c <HAL_TIMEx_MasterConfigSynchronization>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80007f8:	f7ff ff36 	bl	8000668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fc:	2138      	movs	r1, #56	; 0x38
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2260      	movs	r2, #96	; 0x60
 8000802:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000828:	1879      	adds	r1, r7, r1
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <MX_TIM1_Init+0x184>)
 800082c:	2200      	movs	r2, #0
 800082e:	0018      	movs	r0, r3
 8000830:	f001 fce4 	bl	80021fc <HAL_TIM_PWM_ConfigChannel>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000838:	f7ff ff16 	bl	8000668 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	0192      	lsls	r2, r2, #6
 8000860:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	0492      	lsls	r2, r2, #18
 800087a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800088e:	1d3a      	adds	r2, r7, #4
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_TIM1_Init+0x184>)
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f002 faa9 	bl	8002dec <HAL_TIMEx_ConfigBreakDeadTime>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800089e:	f7ff fee3 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b01c      	add	sp, #112	; 0x70
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	2000002c 	.word	0x2000002c
 80008b0:	40012c00 	.word	0x40012c00
 80008b4:	00003e7f 	.word	0x00003e7f

080008b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b08f      	sub	sp, #60	; 0x3c
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	2410      	movs	r4, #16
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	0018      	movs	r0, r3
 80008c6:	2328      	movs	r3, #40	; 0x28
 80008c8:	001a      	movs	r2, r3
 80008ca:	2100      	movs	r1, #0
 80008cc:	f003 f81c 	bl	8003908 <memset>
  if(tim_baseHandle->Instance==TIM1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a19      	ldr	r2, [pc, #100]	; (800093c <HAL_TIM_Base_MspInit+0x84>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d12c      	bne.n	8000934 <HAL_TIM_Base_MspInit+0x7c>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2280      	movs	r2, #128	; 0x80
 80008de:	0392      	lsls	r2, r2, #14
 80008e0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 f8ce 	bl	8001a8c <HAL_RCCEx_PeriphCLKConfig>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80008f4:	f7ff feb8 	bl	8000668 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_TIM_Base_MspInit+0x88>)
 80008fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_TIM_Base_MspInit+0x88>)
 80008fe:	2180      	movs	r1, #128	; 0x80
 8000900:	0109      	lsls	r1, r1, #4
 8000902:	430a      	orrs	r2, r1
 8000904:	641a      	str	r2, [r3, #64]	; 0x40
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_TIM_Base_MspInit+0x88>)
 8000908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800090a:	2380      	movs	r3, #128	; 0x80
 800090c:	011b      	lsls	r3, r3, #4
 800090e:	4013      	ands	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	200d      	movs	r0, #13
 800091a:	f000 f9ed 	bl	8000cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800091e:	200d      	movs	r0, #13
 8000920:	f000 f9ff 	bl	8000d22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	200e      	movs	r0, #14
 800092a:	f000 f9e5 	bl	8000cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800092e:	200e      	movs	r0, #14
 8000930:	f000 f9f7 	bl	8000d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b00f      	add	sp, #60	; 0x3c
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	40012c00 	.word	0x40012c00
 8000940:	40021000 	.word	0x40021000

08000944 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_USART2_UART_Init+0x60>)
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <MX_USART2_UART_Init+0x64>)
 800094c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_USART2_UART_Init+0x60>)
 8000950:	22e1      	movs	r2, #225	; 0xe1
 8000952:	0252      	lsls	r2, r2, #9
 8000954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_USART2_UART_Init+0x60>)
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	0552      	lsls	r2, r2, #21
 800095c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART2_UART_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_USART2_UART_Init+0x60>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART2_UART_Init+0x60>)
 800096c:	220c      	movs	r2, #12
 800096e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART2_UART_Init+0x60>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART2_UART_Init+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART2_UART_Init+0x60>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART2_UART_Init+0x60>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART2_UART_Init+0x60>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <MX_USART2_UART_Init+0x60>)
 8000990:	0018      	movs	r0, r3
 8000992:	f002 fae9 	bl	8002f68 <HAL_UART_Init>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800099a:	f7ff fe65 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000078 	.word	0x20000078
 80009a8:	40004400 	.word	0x40004400

080009ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b08b      	sub	sp, #44	; 0x2c
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	2414      	movs	r4, #20
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	0018      	movs	r0, r3
 80009ba:	2314      	movs	r3, #20
 80009bc:	001a      	movs	r2, r3
 80009be:	2100      	movs	r1, #0
 80009c0:	f002 ffa2 	bl	8003908 <memset>
  if(uartHandle->Instance==USART2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <HAL_UART_MspInit+0x8c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d130      	bne.n	8000a30 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <HAL_UART_MspInit+0x90>)
 80009d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <HAL_UART_MspInit+0x90>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0289      	lsls	r1, r1, #10
 80009d8:	430a      	orrs	r2, r1
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <HAL_UART_MspInit+0x90>)
 80009de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	029b      	lsls	r3, r3, #10
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_UART_MspInit+0x90>)
 80009ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <HAL_UART_MspInit+0x90>)
 80009f0:	2101      	movs	r1, #1
 80009f2:	430a      	orrs	r2, r1
 80009f4:	635a      	str	r2, [r3, #52]	; 0x34
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_UART_MspInit+0x90>)
 80009f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fa:	2201      	movs	r2, #1
 80009fc:	4013      	ands	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000a02:	0021      	movs	r1, r4
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	220c      	movs	r2, #12
 8000a08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2201      	movs	r2, #1
 8000a14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2201      	movs	r2, #1
 8000a20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	187a      	adds	r2, r7, r1
 8000a24:	23a0      	movs	r3, #160	; 0xa0
 8000a26:	05db      	lsls	r3, r3, #23
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 f996 	bl	8000d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b00b      	add	sp, #44	; 0x2c
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	40004400 	.word	0x40004400
 8000a3c:	40021000 	.word	0x40021000

08000a40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a44:	f7ff fe6a 	bl	800071c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4a:	490d      	ldr	r1, [pc, #52]	; (8000a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <LoopForever+0xe>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a60:	4c0a      	ldr	r4, [pc, #40]	; (8000a8c <LoopForever+0x16>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a6e:	f002 ff27 	bl	80038c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a72:	f7ff fd73 	bl	800055c <main>

08000a76 <LoopForever>:

LoopForever:
  b LoopForever
 8000a76:	e7fe      	b.n	8000a76 <LoopForever>
  ldr   r0, =_estack
 8000a78:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a84:	08003a0c 	.word	0x08003a0c
  ldr r2, =_sbss
 8000a88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a8c:	2000010c 	.word	0x2000010c

08000a90 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC1_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_Init+0x3c>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_Init+0x3c>)
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	0049      	lsls	r1, r1, #1
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 f810 	bl	8000ad4 <HAL_InitTick>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	e001      	b.n	8000ac4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ac0:	f7ff fdd8 	bl	8000674 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	781b      	ldrb	r3, [r3, #0]
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b002      	add	sp, #8
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40022000 	.word	0x40022000

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000adc:	230f      	movs	r3, #15
 8000ade:	18fb      	adds	r3, r7, r3
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <HAL_InitTick+0x88>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d02b      	beq.n	8000b44 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <HAL_InitTick+0x8c>)
 8000aee:	681c      	ldr	r4, [r3, #0]
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_InitTick+0x88>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	0019      	movs	r1, r3
 8000af6:	23fa      	movs	r3, #250	; 0xfa
 8000af8:	0098      	lsls	r0, r3, #2
 8000afa:	f7ff fb03 	bl	8000104 <__udivsi3>
 8000afe:	0003      	movs	r3, r0
 8000b00:	0019      	movs	r1, r3
 8000b02:	0020      	movs	r0, r4
 8000b04:	f7ff fafe 	bl	8000104 <__udivsi3>
 8000b08:	0003      	movs	r3, r0
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 f919 	bl	8000d42 <HAL_SYSTICK_Config>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d112      	bne.n	8000b3a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d80a      	bhi.n	8000b30 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	425b      	negs	r3, r3
 8000b20:	2200      	movs	r2, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 f8e8 	bl	8000cf8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_InitTick+0x90>)
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	e00d      	b.n	8000b4c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b30:	230f      	movs	r3, #15
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	e008      	b.n	8000b4c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	18fb      	adds	r3, r7, r3
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
 8000b42:	e003      	b.n	8000b4c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b44:	230f      	movs	r3, #15
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	18fb      	adds	r3, r7, r3
 8000b50:	781b      	ldrb	r3, [r3, #0]
}
 8000b52:	0018      	movs	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b005      	add	sp, #20
 8000b58:	bd90      	pop	{r4, r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <HAL_IncTick+0x1c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	001a      	movs	r2, r3
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_IncTick+0x20>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	18d2      	adds	r2, r2, r3
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_IncTick+0x20>)
 8000b7a:	601a      	str	r2, [r3, #0]
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000108 	.word	0x20000108

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b02      	ldr	r3, [pc, #8]	; (8000b9c <HAL_GetTick+0x10>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	0018      	movs	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	20000108 	.word	0x20000108

08000ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	0002      	movs	r2, r0
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb2:	d809      	bhi.n	8000bc8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	001a      	movs	r2, r3
 8000bba:	231f      	movs	r3, #31
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <__NVIC_EnableIRQ+0x30>)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4091      	lsls	r1, r2
 8000bc4:	000a      	movs	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b002      	add	sp, #8
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	0002      	movs	r2, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b7f      	cmp	r3, #127	; 0x7f
 8000be8:	d828      	bhi.n	8000c3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bea:	4a2f      	ldr	r2, [pc, #188]	; (8000ca8 <__NVIC_SetPriority+0xd4>)
 8000bec:	1dfb      	adds	r3, r7, #7
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	33c0      	adds	r3, #192	; 0xc0
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	589b      	ldr	r3, [r3, r2]
 8000bfa:	1dfa      	adds	r2, r7, #7
 8000bfc:	7812      	ldrb	r2, [r2, #0]
 8000bfe:	0011      	movs	r1, r2
 8000c00:	2203      	movs	r2, #3
 8000c02:	400a      	ands	r2, r1
 8000c04:	00d2      	lsls	r2, r2, #3
 8000c06:	21ff      	movs	r1, #255	; 0xff
 8000c08:	4091      	lsls	r1, r2
 8000c0a:	000a      	movs	r2, r1
 8000c0c:	43d2      	mvns	r2, r2
 8000c0e:	401a      	ands	r2, r3
 8000c10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	019b      	lsls	r3, r3, #6
 8000c16:	22ff      	movs	r2, #255	; 0xff
 8000c18:	401a      	ands	r2, r3
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	0018      	movs	r0, r3
 8000c20:	2303      	movs	r3, #3
 8000c22:	4003      	ands	r3, r0
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c28:	481f      	ldr	r0, [pc, #124]	; (8000ca8 <__NVIC_SetPriority+0xd4>)
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	089b      	lsrs	r3, r3, #2
 8000c32:	430a      	orrs	r2, r1
 8000c34:	33c0      	adds	r3, #192	; 0xc0
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c3a:	e031      	b.n	8000ca0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <__NVIC_SetPriority+0xd8>)
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	0019      	movs	r1, r3
 8000c44:	230f      	movs	r3, #15
 8000c46:	400b      	ands	r3, r1
 8000c48:	3b08      	subs	r3, #8
 8000c4a:	089b      	lsrs	r3, r3, #2
 8000c4c:	3306      	adds	r3, #6
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	18d3      	adds	r3, r2, r3
 8000c52:	3304      	adds	r3, #4
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	1dfa      	adds	r2, r7, #7
 8000c58:	7812      	ldrb	r2, [r2, #0]
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	400a      	ands	r2, r1
 8000c60:	00d2      	lsls	r2, r2, #3
 8000c62:	21ff      	movs	r1, #255	; 0xff
 8000c64:	4091      	lsls	r1, r2
 8000c66:	000a      	movs	r2, r1
 8000c68:	43d2      	mvns	r2, r2
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	019b      	lsls	r3, r3, #6
 8000c72:	22ff      	movs	r2, #255	; 0xff
 8000c74:	401a      	ands	r2, r3
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	4003      	ands	r3, r0
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <__NVIC_SetPriority+0xd8>)
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	001c      	movs	r4, r3
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	4023      	ands	r3, r4
 8000c90:	3b08      	subs	r3, #8
 8000c92:	089b      	lsrs	r3, r3, #2
 8000c94:	430a      	orrs	r2, r1
 8000c96:	3306      	adds	r3, #6
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	18c3      	adds	r3, r0, r3
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	601a      	str	r2, [r3, #0]
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b003      	add	sp, #12
 8000ca6:	bd90      	pop	{r4, r7, pc}
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	1e5a      	subs	r2, r3, #1
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	045b      	lsls	r3, r3, #17
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d301      	bcc.n	8000cc8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e010      	b.n	8000cea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <SysTick_Config+0x44>)
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	3a01      	subs	r2, #1
 8000cce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	425b      	negs	r3, r3
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff ff7c 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x44>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x44>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	0018      	movs	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	210f      	movs	r1, #15
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	1c02      	adds	r2, r0, #0
 8000d08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	0011      	movs	r1, r2
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff ff5d 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b004      	add	sp, #16
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	0002      	movs	r2, r0
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b25b      	sxtb	r3, r3
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff ff33 	bl	8000ba0 <__NVIC_EnableIRQ>
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff ffaf 	bl	8000cb0 <SysTick_Config>
 8000d52:	0003      	movs	r3, r0
}
 8000d54:	0018      	movs	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b002      	add	sp, #8
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6a:	e147      	b.n	8000ffc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2101      	movs	r1, #1
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4091      	lsls	r1, r2
 8000d76:	000a      	movs	r2, r1
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d100      	bne.n	8000d84 <HAL_GPIO_Init+0x28>
 8000d82:	e138      	b.n	8000ff6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2203      	movs	r2, #3
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d005      	beq.n	8000d9c <HAL_GPIO_Init+0x40>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2203      	movs	r2, #3
 8000d96:	4013      	ands	r3, r2
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d130      	bne.n	8000dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	409a      	lsls	r2, r3
 8000daa:	0013      	movs	r3, r2
 8000dac:	43da      	mvns	r2, r3
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	409a      	lsls	r2, r3
 8000dbe:	0013      	movs	r3, r2
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	091b      	lsrs	r3, r3, #4
 8000de8:	2201      	movs	r2, #1
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2203      	movs	r2, #3
 8000e04:	4013      	ands	r3, r2
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d017      	beq.n	8000e3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2203      	movs	r2, #3
 8000e40:	4013      	ands	r3, r2
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d123      	bne.n	8000e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	0092      	lsls	r2, r2, #2
 8000e50:	58d3      	ldr	r3, [r2, r3]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	2207      	movs	r2, #7
 8000e58:	4013      	ands	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	43da      	mvns	r2, r3
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	691a      	ldr	r2, [r3, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	2107      	movs	r1, #7
 8000e72:	400b      	ands	r3, r1
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	6939      	ldr	r1, [r7, #16]
 8000e8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2203      	movs	r2, #3
 8000eac:	401a      	ands	r2, r3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	23c0      	movs	r3, #192	; 0xc0
 8000ec8:	029b      	lsls	r3, r3, #10
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d100      	bne.n	8000ed0 <HAL_GPIO_Init+0x174>
 8000ece:	e092      	b.n	8000ff6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ed0:	4a50      	ldr	r2, [pc, #320]	; (8001014 <HAL_GPIO_Init+0x2b8>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3318      	adds	r3, #24
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	589b      	ldr	r3, [r3, r2]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	0013      	movs	r3, r2
 8000eec:	43da      	mvns	r2, r3
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	23a0      	movs	r3, #160	; 0xa0
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x1ca>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a45      	ldr	r2, [pc, #276]	; (8001018 <HAL_GPIO_Init+0x2bc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x1c6>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a44      	ldr	r2, [pc, #272]	; (800101c <HAL_GPIO_Init+0x2c0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x1c2>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a43      	ldr	r2, [pc, #268]	; (8001020 <HAL_GPIO_Init+0x2c4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x1be>
 8000f16:	2303      	movs	r3, #3
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x1cc>
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	e004      	b.n	8000f28 <HAL_GPIO_Init+0x1cc>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_Init+0x1cc>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x1cc>
 8000f26:	2300      	movs	r3, #0
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	400a      	ands	r2, r1
 8000f2e:	00d2      	lsls	r2, r2, #3
 8000f30:	4093      	lsls	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f38:	4936      	ldr	r1, [pc, #216]	; (8001014 <HAL_GPIO_Init+0x2b8>)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3318      	adds	r3, #24
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f46:	4a33      	ldr	r2, [pc, #204]	; (8001014 <HAL_GPIO_Init+0x2b8>)
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	58d3      	ldr	r3, [r2, r3]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43da      	mvns	r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	025b      	lsls	r3, r3, #9
 8000f60:	4013      	ands	r3, r2
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f6c:	4929      	ldr	r1, [pc, #164]	; (8001014 <HAL_GPIO_Init+0x2b8>)
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000f74:	4a27      	ldr	r2, [pc, #156]	; (8001014 <HAL_GPIO_Init+0x2b8>)
 8000f76:	2384      	movs	r3, #132	; 0x84
 8000f78:	58d3      	ldr	r3, [r2, r3]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	2380      	movs	r3, #128	; 0x80
 8000f8c:	029b      	lsls	r3, r3, #10
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f9a:	491e      	ldr	r1, [pc, #120]	; (8001014 <HAL_GPIO_Init+0x2b8>)
 8000f9c:	2284      	movs	r2, #132	; 0x84
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <HAL_GPIO_Init+0x2b8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	43da      	mvns	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	035b      	lsls	r3, r3, #13
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_GPIO_Init+0x2b8>)
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_GPIO_Init+0x2b8>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	43da      	mvns	r2, r3
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	039b      	lsls	r3, r3, #14
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_GPIO_Init+0x2b8>)
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	40da      	lsrs	r2, r3
 8001004:	1e13      	subs	r3, r2, #0
 8001006:	d000      	beq.n	800100a <HAL_GPIO_Init+0x2ae>
 8001008:	e6b0      	b.n	8000d6c <HAL_GPIO_Init+0x10>
  }
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	b006      	add	sp, #24
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40021800 	.word	0x40021800
 8001018:	50000400 	.word	0x50000400
 800101c:	50000800 	.word	0x50000800
 8001020:	50000c00 	.word	0x50000c00

08001024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	0008      	movs	r0, r1
 800102e:	0011      	movs	r1, r2
 8001030:	1cbb      	adds	r3, r7, #2
 8001032:	1c02      	adds	r2, r0, #0
 8001034:	801a      	strh	r2, [r3, #0]
 8001036:	1c7b      	adds	r3, r7, #1
 8001038:	1c0a      	adds	r2, r1, #0
 800103a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800103c:	1c7b      	adds	r3, r7, #1
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001044:	1cbb      	adds	r3, r7, #2
 8001046:	881a      	ldrh	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800104c:	e003      	b.n	8001056 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800104e:	1cbb      	adds	r3, r7, #2
 8001050:	881a      	ldrh	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46bd      	mov	sp, r7
 800105a:	b002      	add	sp, #8
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800106e:	4013      	ands	r3, r2
 8001070:	0019      	movs	r1, r3
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	429a      	cmp	r2, r3
 8001082:	d11f      	bne.n	80010c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	0013      	movs	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	189b      	adds	r3, r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4912      	ldr	r1, [pc, #72]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001092:	0018      	movs	r0, r3
 8001094:	f7ff f836 	bl	8000104 <__udivsi3>
 8001098:	0003      	movs	r3, r0
 800109a:	3301      	adds	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800109e:	e008      	b.n	80010b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	e001      	b.n	80010b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e009      	b.n	80010c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010b4:	695a      	ldr	r2, [r3, #20]
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	401a      	ands	r2, r3
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d0ed      	beq.n	80010a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	0018      	movs	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b004      	add	sp, #16
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	40007000 	.word	0x40007000
 80010d4:	fffff9ff 	.word	0xfffff9ff
 80010d8:	20000000 	.word	0x20000000
 80010dc:	000f4240 	.word	0x000f4240

080010e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	23e0      	movs	r3, #224	; 0xe0
 80010ea:	01db      	lsls	r3, r3, #7
 80010ec:	4013      	ands	r3, r2
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e304      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2201      	movs	r2, #1
 8001110:	4013      	ands	r3, r2
 8001112:	d100      	bne.n	8001116 <HAL_RCC_OscConfig+0x1e>
 8001114:	e07c      	b.n	8001210 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001116:	4bc3      	ldr	r3, [pc, #780]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2238      	movs	r2, #56	; 0x38
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001120:	4bc0      	ldr	r3, [pc, #768]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	2203      	movs	r2, #3
 8001126:	4013      	ands	r3, r2
 8001128:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	2b10      	cmp	r3, #16
 800112e:	d102      	bne.n	8001136 <HAL_RCC_OscConfig+0x3e>
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d002      	beq.n	800113c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	2b08      	cmp	r3, #8
 800113a:	d10b      	bne.n	8001154 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113c:	4bb9      	ldr	r3, [pc, #740]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	029b      	lsls	r3, r3, #10
 8001144:	4013      	ands	r3, r2
 8001146:	d062      	beq.n	800120e <HAL_RCC_OscConfig+0x116>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d15e      	bne.n	800120e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e2df      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	025b      	lsls	r3, r3, #9
 800115c:	429a      	cmp	r2, r3
 800115e:	d107      	bne.n	8001170 <HAL_RCC_OscConfig+0x78>
 8001160:	4bb0      	ldr	r3, [pc, #704]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4baf      	ldr	r3, [pc, #700]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001166:	2180      	movs	r1, #128	; 0x80
 8001168:	0249      	lsls	r1, r1, #9
 800116a:	430a      	orrs	r2, r1
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e020      	b.n	80011b2 <HAL_RCC_OscConfig+0xba>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	23a0      	movs	r3, #160	; 0xa0
 8001176:	02db      	lsls	r3, r3, #11
 8001178:	429a      	cmp	r2, r3
 800117a:	d10e      	bne.n	800119a <HAL_RCC_OscConfig+0xa2>
 800117c:	4ba9      	ldr	r3, [pc, #676]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4ba8      	ldr	r3, [pc, #672]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	02c9      	lsls	r1, r1, #11
 8001186:	430a      	orrs	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	4ba6      	ldr	r3, [pc, #664]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4ba5      	ldr	r3, [pc, #660]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	0249      	lsls	r1, r1, #9
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e00b      	b.n	80011b2 <HAL_RCC_OscConfig+0xba>
 800119a:	4ba2      	ldr	r3, [pc, #648]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4ba1      	ldr	r3, [pc, #644]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 80011a0:	49a1      	ldr	r1, [pc, #644]	; (8001428 <HAL_RCC_OscConfig+0x330>)
 80011a2:	400a      	ands	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	4b9f      	ldr	r3, [pc, #636]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b9e      	ldr	r3, [pc, #632]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 80011ac:	499f      	ldr	r1, [pc, #636]	; (800142c <HAL_RCC_OscConfig+0x334>)
 80011ae:	400a      	ands	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d014      	beq.n	80011e4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ba:	f7ff fce7 	bl	8000b8c <HAL_GetTick>
 80011be:	0003      	movs	r3, r0
 80011c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fce2 	bl	8000b8c <HAL_GetTick>
 80011c8:	0002      	movs	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	; 0x64
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e29e      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011d6:	4b93      	ldr	r3, [pc, #588]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	029b      	lsls	r3, r3, #10
 80011de:	4013      	ands	r3, r2
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0xcc>
 80011e2:	e015      	b.n	8001210 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e4:	f7ff fcd2 	bl	8000b8c <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ee:	f7ff fccd 	bl	8000b8c <HAL_GetTick>
 80011f2:	0002      	movs	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b64      	cmp	r3, #100	; 0x64
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e289      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001200:	4b88      	ldr	r3, [pc, #544]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	029b      	lsls	r3, r3, #10
 8001208:	4013      	ands	r3, r2
 800120a:	d1f0      	bne.n	80011ee <HAL_RCC_OscConfig+0xf6>
 800120c:	e000      	b.n	8001210 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2202      	movs	r2, #2
 8001216:	4013      	ands	r3, r2
 8001218:	d100      	bne.n	800121c <HAL_RCC_OscConfig+0x124>
 800121a:	e099      	b.n	8001350 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121c:	4b81      	ldr	r3, [pc, #516]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2238      	movs	r2, #56	; 0x38
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001226:	4b7f      	ldr	r3, [pc, #508]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2203      	movs	r2, #3
 800122c:	4013      	ands	r3, r2
 800122e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2b10      	cmp	r3, #16
 8001234:	d102      	bne.n	800123c <HAL_RCC_OscConfig+0x144>
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d002      	beq.n	8001242 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d135      	bne.n	80012ae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001242:	4b78      	ldr	r3, [pc, #480]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4013      	ands	r3, r2
 800124c:	d005      	beq.n	800125a <HAL_RCC_OscConfig+0x162>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e25c      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125a:	4b72      	ldr	r3, [pc, #456]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4a74      	ldr	r2, [pc, #464]	; (8001430 <HAL_RCC_OscConfig+0x338>)
 8001260:	4013      	ands	r3, r2
 8001262:	0019      	movs	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	021a      	lsls	r2, r3, #8
 800126a:	4b6e      	ldr	r3, [pc, #440]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 800126c:	430a      	orrs	r2, r1
 800126e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d112      	bne.n	800129c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001276:	4b6b      	ldr	r3, [pc, #428]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a6e      	ldr	r2, [pc, #440]	; (8001434 <HAL_RCC_OscConfig+0x33c>)
 800127c:	4013      	ands	r3, r2
 800127e:	0019      	movs	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	4b67      	ldr	r3, [pc, #412]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800128a:	4b66      	ldr	r3, [pc, #408]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	0adb      	lsrs	r3, r3, #11
 8001290:	2207      	movs	r2, #7
 8001292:	4013      	ands	r3, r2
 8001294:	4a68      	ldr	r2, [pc, #416]	; (8001438 <HAL_RCC_OscConfig+0x340>)
 8001296:	40da      	lsrs	r2, r3
 8001298:	4b68      	ldr	r3, [pc, #416]	; (800143c <HAL_RCC_OscConfig+0x344>)
 800129a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800129c:	4b68      	ldr	r3, [pc, #416]	; (8001440 <HAL_RCC_OscConfig+0x348>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff fc17 	bl	8000ad4 <HAL_InitTick>
 80012a6:	1e03      	subs	r3, r0, #0
 80012a8:	d051      	beq.n	800134e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e232      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d030      	beq.n	8001318 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012b6:	4b5b      	ldr	r3, [pc, #364]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a5e      	ldr	r2, [pc, #376]	; (8001434 <HAL_RCC_OscConfig+0x33c>)
 80012bc:	4013      	ands	r3, r2
 80012be:	0019      	movs	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	4b57      	ldr	r3, [pc, #348]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012ca:	4b56      	ldr	r3, [pc, #344]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b55      	ldr	r3, [pc, #340]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 80012d0:	2180      	movs	r1, #128	; 0x80
 80012d2:	0049      	lsls	r1, r1, #1
 80012d4:	430a      	orrs	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fc58 	bl	8000b8c <HAL_GetTick>
 80012dc:	0003      	movs	r3, r0
 80012de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e2:	f7ff fc53 	bl	8000b8c <HAL_GetTick>
 80012e6:	0002      	movs	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e20f      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f4:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4013      	ands	r3, r2
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001300:	4b48      	ldr	r3, [pc, #288]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4a4a      	ldr	r2, [pc, #296]	; (8001430 <HAL_RCC_OscConfig+0x338>)
 8001306:	4013      	ands	r3, r2
 8001308:	0019      	movs	r1, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	021a      	lsls	r2, r3, #8
 8001310:	4b44      	ldr	r3, [pc, #272]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001312:	430a      	orrs	r2, r1
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	e01b      	b.n	8001350 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001318:	4b42      	ldr	r3, [pc, #264]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b41      	ldr	r3, [pc, #260]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 800131e:	4949      	ldr	r1, [pc, #292]	; (8001444 <HAL_RCC_OscConfig+0x34c>)
 8001320:	400a      	ands	r2, r1
 8001322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fc32 	bl	8000b8c <HAL_GetTick>
 8001328:	0003      	movs	r3, r0
 800132a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132e:	f7ff fc2d 	bl	8000b8c <HAL_GetTick>
 8001332:	0002      	movs	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e1e9      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001340:	4b38      	ldr	r3, [pc, #224]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4013      	ands	r3, r2
 800134a:	d1f0      	bne.n	800132e <HAL_RCC_OscConfig+0x236>
 800134c:	e000      	b.n	8001350 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800134e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2208      	movs	r2, #8
 8001356:	4013      	ands	r3, r2
 8001358:	d047      	beq.n	80013ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800135a:	4b32      	ldr	r3, [pc, #200]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2238      	movs	r2, #56	; 0x38
 8001360:	4013      	ands	r3, r2
 8001362:	2b18      	cmp	r3, #24
 8001364:	d10a      	bne.n	800137c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001366:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136a:	2202      	movs	r2, #2
 800136c:	4013      	ands	r3, r2
 800136e:	d03c      	beq.n	80013ea <HAL_RCC_OscConfig+0x2f2>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d138      	bne.n	80013ea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e1cb      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d019      	beq.n	80013b8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001386:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001388:	4b26      	ldr	r3, [pc, #152]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 800138a:	2101      	movs	r1, #1
 800138c:	430a      	orrs	r2, r1
 800138e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fbfc 	bl	8000b8c <HAL_GetTick>
 8001394:	0003      	movs	r3, r0
 8001396:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800139a:	f7ff fbf7 	bl	8000b8c <HAL_GetTick>
 800139e:	0002      	movs	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e1b3      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 80013ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b0:	2202      	movs	r2, #2
 80013b2:	4013      	ands	r3, r2
 80013b4:	d0f1      	beq.n	800139a <HAL_RCC_OscConfig+0x2a2>
 80013b6:	e018      	b.n	80013ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 80013ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 80013be:	2101      	movs	r1, #1
 80013c0:	438a      	bics	r2, r1
 80013c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c4:	f7ff fbe2 	bl	8000b8c <HAL_GetTick>
 80013c8:	0003      	movs	r3, r0
 80013ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ce:	f7ff fbdd 	bl	8000b8c <HAL_GetTick>
 80013d2:	0002      	movs	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e199      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e4:	2202      	movs	r2, #2
 80013e6:	4013      	ands	r3, r2
 80013e8:	d1f1      	bne.n	80013ce <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2204      	movs	r2, #4
 80013f0:	4013      	ands	r3, r2
 80013f2:	d100      	bne.n	80013f6 <HAL_RCC_OscConfig+0x2fe>
 80013f4:	e0c6      	b.n	8001584 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f6:	231f      	movs	r3, #31
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2238      	movs	r2, #56	; 0x38
 8001404:	4013      	ands	r3, r2
 8001406:	2b20      	cmp	r3, #32
 8001408:	d11e      	bne.n	8001448 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_RCC_OscConfig+0x32c>)
 800140c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140e:	2202      	movs	r2, #2
 8001410:	4013      	ands	r3, r2
 8001412:	d100      	bne.n	8001416 <HAL_RCC_OscConfig+0x31e>
 8001414:	e0b6      	b.n	8001584 <HAL_RCC_OscConfig+0x48c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d000      	beq.n	8001420 <HAL_RCC_OscConfig+0x328>
 800141e:	e0b1      	b.n	8001584 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e177      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
 8001424:	40021000 	.word	0x40021000
 8001428:	fffeffff 	.word	0xfffeffff
 800142c:	fffbffff 	.word	0xfffbffff
 8001430:	ffff80ff 	.word	0xffff80ff
 8001434:	ffffc7ff 	.word	0xffffc7ff
 8001438:	00f42400 	.word	0x00f42400
 800143c:	20000000 	.word	0x20000000
 8001440:	20000004 	.word	0x20000004
 8001444:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001448:	4bb4      	ldr	r3, [pc, #720]	; (800171c <HAL_RCC_OscConfig+0x624>)
 800144a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	055b      	lsls	r3, r3, #21
 8001450:	4013      	ands	r3, r2
 8001452:	d101      	bne.n	8001458 <HAL_RCC_OscConfig+0x360>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <HAL_RCC_OscConfig+0x362>
 8001458:	2300      	movs	r3, #0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d011      	beq.n	8001482 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4baf      	ldr	r3, [pc, #700]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001462:	4bae      	ldr	r3, [pc, #696]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	0549      	lsls	r1, r1, #21
 8001468:	430a      	orrs	r2, r1
 800146a:	63da      	str	r2, [r3, #60]	; 0x3c
 800146c:	4bab      	ldr	r3, [pc, #684]	; (800171c <HAL_RCC_OscConfig+0x624>)
 800146e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	055b      	lsls	r3, r3, #21
 8001474:	4013      	ands	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800147a:	231f      	movs	r3, #31
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001482:	4ba7      	ldr	r3, [pc, #668]	; (8001720 <HAL_RCC_OscConfig+0x628>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4013      	ands	r3, r2
 800148c:	d11a      	bne.n	80014c4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800148e:	4ba4      	ldr	r3, [pc, #656]	; (8001720 <HAL_RCC_OscConfig+0x628>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4ba3      	ldr	r3, [pc, #652]	; (8001720 <HAL_RCC_OscConfig+0x628>)
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	0049      	lsls	r1, r1, #1
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800149c:	f7ff fb76 	bl	8000b8c <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a6:	f7ff fb71 	bl	8000b8c <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e12d      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b8:	4b99      	ldr	r3, [pc, #612]	; (8001720 <HAL_RCC_OscConfig+0x628>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4013      	ands	r3, r2
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x3e2>
 80014cc:	4b93      	ldr	r3, [pc, #588]	; (800171c <HAL_RCC_OscConfig+0x624>)
 80014ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014d0:	4b92      	ldr	r3, [pc, #584]	; (800171c <HAL_RCC_OscConfig+0x624>)
 80014d2:	2101      	movs	r1, #1
 80014d4:	430a      	orrs	r2, r1
 80014d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80014d8:	e01c      	b.n	8001514 <HAL_RCC_OscConfig+0x41c>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x404>
 80014e2:	4b8e      	ldr	r3, [pc, #568]	; (800171c <HAL_RCC_OscConfig+0x624>)
 80014e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014e6:	4b8d      	ldr	r3, [pc, #564]	; (800171c <HAL_RCC_OscConfig+0x624>)
 80014e8:	2104      	movs	r1, #4
 80014ea:	430a      	orrs	r2, r1
 80014ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80014ee:	4b8b      	ldr	r3, [pc, #556]	; (800171c <HAL_RCC_OscConfig+0x624>)
 80014f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014f2:	4b8a      	ldr	r3, [pc, #552]	; (800171c <HAL_RCC_OscConfig+0x624>)
 80014f4:	2101      	movs	r1, #1
 80014f6:	430a      	orrs	r2, r1
 80014f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0x41c>
 80014fc:	4b87      	ldr	r3, [pc, #540]	; (800171c <HAL_RCC_OscConfig+0x624>)
 80014fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001500:	4b86      	ldr	r3, [pc, #536]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001502:	2101      	movs	r1, #1
 8001504:	438a      	bics	r2, r1
 8001506:	65da      	str	r2, [r3, #92]	; 0x5c
 8001508:	4b84      	ldr	r3, [pc, #528]	; (800171c <HAL_RCC_OscConfig+0x624>)
 800150a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800150c:	4b83      	ldr	r3, [pc, #524]	; (800171c <HAL_RCC_OscConfig+0x624>)
 800150e:	2104      	movs	r1, #4
 8001510:	438a      	bics	r2, r1
 8001512:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d014      	beq.n	8001546 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fb36 	bl	8000b8c <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001524:	e009      	b.n	800153a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001526:	f7ff fb31 	bl	8000b8c <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	4a7c      	ldr	r2, [pc, #496]	; (8001724 <HAL_RCC_OscConfig+0x62c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e0ec      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800153a:	4b78      	ldr	r3, [pc, #480]	; (800171c <HAL_RCC_OscConfig+0x624>)
 800153c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153e:	2202      	movs	r2, #2
 8001540:	4013      	ands	r3, r2
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x42e>
 8001544:	e013      	b.n	800156e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	f7ff fb21 	bl	8000b8c <HAL_GetTick>
 800154a:	0003      	movs	r3, r0
 800154c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800154e:	e009      	b.n	8001564 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001550:	f7ff fb1c 	bl	8000b8c <HAL_GetTick>
 8001554:	0002      	movs	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	4a72      	ldr	r2, [pc, #456]	; (8001724 <HAL_RCC_OscConfig+0x62c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e0d7      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001564:	4b6d      	ldr	r3, [pc, #436]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001568:	2202      	movs	r2, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800156e:	231f      	movs	r3, #31
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d105      	bne.n	8001584 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001578:	4b68      	ldr	r3, [pc, #416]	; (800171c <HAL_RCC_OscConfig+0x624>)
 800157a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800157c:	4b67      	ldr	r3, [pc, #412]	; (800171c <HAL_RCC_OscConfig+0x624>)
 800157e:	496a      	ldr	r1, [pc, #424]	; (8001728 <HAL_RCC_OscConfig+0x630>)
 8001580:	400a      	ands	r2, r1
 8001582:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d100      	bne.n	800158e <HAL_RCC_OscConfig+0x496>
 800158c:	e0c1      	b.n	8001712 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800158e:	4b63      	ldr	r3, [pc, #396]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2238      	movs	r2, #56	; 0x38
 8001594:	4013      	ands	r3, r2
 8001596:	2b10      	cmp	r3, #16
 8001598:	d100      	bne.n	800159c <HAL_RCC_OscConfig+0x4a4>
 800159a:	e081      	b.n	80016a0 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d156      	bne.n	8001652 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a4:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_RCC_OscConfig+0x624>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b5c      	ldr	r3, [pc, #368]	; (800171c <HAL_RCC_OscConfig+0x624>)
 80015aa:	4960      	ldr	r1, [pc, #384]	; (800172c <HAL_RCC_OscConfig+0x634>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff faec 	bl	8000b8c <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff fae7 	bl	8000b8c <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e0a3      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015cc:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_OscConfig+0x624>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	049b      	lsls	r3, r3, #18
 80015d4:	4013      	ands	r3, r2
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_RCC_OscConfig+0x624>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4a54      	ldr	r2, [pc, #336]	; (8001730 <HAL_RCC_OscConfig+0x638>)
 80015de:	4013      	ands	r3, r2
 80015e0:	0019      	movs	r1, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1a      	ldr	r2, [r3, #32]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001604:	431a      	orrs	r2, r3
 8001606:	4b45      	ldr	r3, [pc, #276]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001608:	430a      	orrs	r2, r1
 800160a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800160c:	4b43      	ldr	r3, [pc, #268]	; (800171c <HAL_RCC_OscConfig+0x624>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001612:	2180      	movs	r1, #128	; 0x80
 8001614:	0449      	lsls	r1, r1, #17
 8001616:	430a      	orrs	r2, r1
 8001618:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800161a:	4b40      	ldr	r3, [pc, #256]	; (800171c <HAL_RCC_OscConfig+0x624>)
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	0549      	lsls	r1, r1, #21
 8001624:	430a      	orrs	r2, r1
 8001626:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fab0 	bl	8000b8c <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff faab 	bl	8000b8c <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e067      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001644:	4b35      	ldr	r3, [pc, #212]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	049b      	lsls	r3, r3, #18
 800164c:	4013      	ands	r3, r2
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x53a>
 8001650:	e05f      	b.n	8001712 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	4b32      	ldr	r3, [pc, #200]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001658:	4934      	ldr	r1, [pc, #208]	; (800172c <HAL_RCC_OscConfig+0x634>)
 800165a:	400a      	ands	r2, r1
 800165c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800165e:	4b2f      	ldr	r3, [pc, #188]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	4b2e      	ldr	r3, [pc, #184]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001664:	2103      	movs	r1, #3
 8001666:	438a      	bics	r2, r1
 8001668:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <HAL_RCC_OscConfig+0x624>)
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001670:	4930      	ldr	r1, [pc, #192]	; (8001734 <HAL_RCC_OscConfig+0x63c>)
 8001672:	400a      	ands	r2, r1
 8001674:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff fa89 	bl	8000b8c <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fa84 	bl	8000b8c <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e040      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_RCC_OscConfig+0x624>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	049b      	lsls	r3, r3, #18
 800169a:	4013      	ands	r3, r2
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x588>
 800169e:	e038      	b.n	8001712 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e033      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x624>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2203      	movs	r2, #3
 80016b6:	401a      	ands	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d126      	bne.n	800170e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2270      	movs	r2, #112	; 0x70
 80016c4:	401a      	ands	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d11f      	bne.n	800170e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	23fe      	movs	r3, #254	; 0xfe
 80016d2:	01db      	lsls	r3, r3, #7
 80016d4:	401a      	ands	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d116      	bne.n	800170e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	23f8      	movs	r3, #248	; 0xf8
 80016e4:	039b      	lsls	r3, r3, #14
 80016e6:	401a      	ands	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d10e      	bne.n	800170e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	23e0      	movs	r3, #224	; 0xe0
 80016f4:	051b      	lsls	r3, r3, #20
 80016f6:	401a      	ands	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	0f5b      	lsrs	r3, r3, #29
 8001704:	075a      	lsls	r2, r3, #29
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b008      	add	sp, #32
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40021000 	.word	0x40021000
 8001720:	40007000 	.word	0x40007000
 8001724:	00001388 	.word	0x00001388
 8001728:	efffffff 	.word	0xefffffff
 800172c:	feffffff 	.word	0xfeffffff
 8001730:	11c1808c 	.word	0x11c1808c
 8001734:	eefeffff 	.word	0xeefeffff

08001738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0e9      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800174c:	4b76      	ldr	r3, [pc, #472]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2207      	movs	r2, #7
 8001752:	4013      	ands	r3, r2
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d91e      	bls.n	8001798 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b73      	ldr	r3, [pc, #460]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2207      	movs	r2, #7
 8001760:	4393      	bics	r3, r2
 8001762:	0019      	movs	r1, r3
 8001764:	4b70      	ldr	r3, [pc, #448]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800176c:	f7ff fa0e 	bl	8000b8c <HAL_GetTick>
 8001770:	0003      	movs	r3, r0
 8001772:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001774:	e009      	b.n	800178a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001776:	f7ff fa09 	bl	8000b8c <HAL_GetTick>
 800177a:	0002      	movs	r2, r0
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	4a6a      	ldr	r2, [pc, #424]	; (800192c <HAL_RCC_ClockConfig+0x1f4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e0ca      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800178a:	4b67      	ldr	r3, [pc, #412]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2207      	movs	r2, #7
 8001790:	4013      	ands	r3, r2
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d1ee      	bne.n	8001776 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2202      	movs	r2, #2
 800179e:	4013      	ands	r3, r2
 80017a0:	d015      	beq.n	80017ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2204      	movs	r2, #4
 80017a8:	4013      	ands	r3, r2
 80017aa:	d006      	beq.n	80017ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017ac:	4b60      	ldr	r3, [pc, #384]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 80017b2:	21e0      	movs	r1, #224	; 0xe0
 80017b4:	01c9      	lsls	r1, r1, #7
 80017b6:	430a      	orrs	r2, r1
 80017b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ba:	4b5d      	ldr	r3, [pc, #372]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	4a5d      	ldr	r2, [pc, #372]	; (8001934 <HAL_RCC_ClockConfig+0x1fc>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	0019      	movs	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 80017ca:	430a      	orrs	r2, r1
 80017cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	d057      	beq.n	8001888 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d107      	bne.n	80017f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	029b      	lsls	r3, r3, #10
 80017e8:	4013      	ands	r3, r2
 80017ea:	d12b      	bne.n	8001844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e097      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f8:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	049b      	lsls	r3, r3, #18
 8001800:	4013      	ands	r3, r2
 8001802:	d11f      	bne.n	8001844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e08b      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d107      	bne.n	8001820 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001810:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4013      	ands	r3, r2
 800181a:	d113      	bne.n	8001844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e07f      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d106      	bne.n	8001836 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001828:	4b41      	ldr	r3, [pc, #260]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 800182a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182c:	2202      	movs	r2, #2
 800182e:	4013      	ands	r3, r2
 8001830:	d108      	bne.n	8001844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e074      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001836:	4b3e      	ldr	r3, [pc, #248]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 8001838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183a:	2202      	movs	r2, #2
 800183c:	4013      	ands	r3, r2
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e06d      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001844:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2207      	movs	r2, #7
 800184a:	4393      	bics	r3, r2
 800184c:	0019      	movs	r1, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 8001854:	430a      	orrs	r2, r1
 8001856:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001858:	f7ff f998 	bl	8000b8c <HAL_GetTick>
 800185c:	0003      	movs	r3, r0
 800185e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001860:	e009      	b.n	8001876 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001862:	f7ff f993 	bl	8000b8c <HAL_GetTick>
 8001866:	0002      	movs	r2, r0
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	4a2f      	ldr	r2, [pc, #188]	; (800192c <HAL_RCC_ClockConfig+0x1f4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e054      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2238      	movs	r2, #56	; 0x38
 800187c:	401a      	ands	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	429a      	cmp	r2, r3
 8001886:	d1ec      	bne.n	8001862 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2207      	movs	r2, #7
 800188e:	4013      	ands	r3, r2
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d21e      	bcs.n	80018d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2207      	movs	r2, #7
 800189c:	4393      	bics	r3, r2
 800189e:	0019      	movs	r1, r3
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018a8:	f7ff f970 	bl	8000b8c <HAL_GetTick>
 80018ac:	0003      	movs	r3, r0
 80018ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018b0:	e009      	b.n	80018c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b2:	f7ff f96b 	bl	8000b8c <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	4a1b      	ldr	r2, [pc, #108]	; (800192c <HAL_RCC_ClockConfig+0x1f4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e02c      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2207      	movs	r2, #7
 80018cc:	4013      	ands	r3, r2
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1ee      	bne.n	80018b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2204      	movs	r2, #4
 80018da:	4013      	ands	r3, r2
 80018dc:	d009      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	4a15      	ldr	r2, [pc, #84]	; (8001938 <HAL_RCC_ClockConfig+0x200>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 80018ee:	430a      	orrs	r2, r1
 80018f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018f2:	f000 f829 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 80018f6:	0001      	movs	r1, r0
 80018f8:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	220f      	movs	r2, #15
 8001900:	401a      	ands	r2, r3
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_RCC_ClockConfig+0x204>)
 8001904:	0092      	lsls	r2, r2, #2
 8001906:	58d3      	ldr	r3, [r2, r3]
 8001908:	221f      	movs	r2, #31
 800190a:	4013      	ands	r3, r2
 800190c:	000a      	movs	r2, r1
 800190e:	40da      	lsrs	r2, r3
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_RCC_ClockConfig+0x208>)
 8001912:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_RCC_ClockConfig+0x20c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff f8db 	bl	8000ad4 <HAL_InitTick>
 800191e:	0003      	movs	r3, r0
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	b004      	add	sp, #16
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40022000 	.word	0x40022000
 800192c:	00001388 	.word	0x00001388
 8001930:	40021000 	.word	0x40021000
 8001934:	fffff0ff 	.word	0xfffff0ff
 8001938:	ffff8fff 	.word	0xffff8fff
 800193c:	08003930 	.word	0x08003930
 8001940:	20000000 	.word	0x20000000
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800194e:	4b3c      	ldr	r3, [pc, #240]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2238      	movs	r2, #56	; 0x38
 8001954:	4013      	ands	r3, r2
 8001956:	d10f      	bne.n	8001978 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001958:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	0adb      	lsrs	r3, r3, #11
 800195e:	2207      	movs	r2, #7
 8001960:	4013      	ands	r3, r2
 8001962:	2201      	movs	r2, #1
 8001964:	409a      	lsls	r2, r3
 8001966:	0013      	movs	r3, r2
 8001968:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800196a:	6839      	ldr	r1, [r7, #0]
 800196c:	4835      	ldr	r0, [pc, #212]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xfc>)
 800196e:	f7fe fbc9 	bl	8000104 <__udivsi3>
 8001972:	0003      	movs	r3, r0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	e05d      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001978:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2238      	movs	r2, #56	; 0x38
 800197e:	4013      	ands	r3, r2
 8001980:	2b08      	cmp	r3, #8
 8001982:	d102      	bne.n	800198a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001984:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x100>)
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	e054      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800198a:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2238      	movs	r2, #56	; 0x38
 8001990:	4013      	ands	r3, r2
 8001992:	2b10      	cmp	r3, #16
 8001994:	d138      	bne.n	8001a08 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001996:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2203      	movs	r2, #3
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019a0:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	2207      	movs	r2, #7
 80019a8:	4013      	ands	r3, r2
 80019aa:	3301      	adds	r3, #1
 80019ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d10d      	bne.n	80019d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	4824      	ldr	r0, [pc, #144]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x100>)
 80019b8:	f7fe fba4 	bl	8000104 <__udivsi3>
 80019bc:	0003      	movs	r3, r0
 80019be:	0019      	movs	r1, r3
 80019c0:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	227f      	movs	r2, #127	; 0x7f
 80019c8:	4013      	ands	r3, r2
 80019ca:	434b      	muls	r3, r1
 80019cc:	617b      	str	r3, [r7, #20]
        break;
 80019ce:	e00d      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	481c      	ldr	r0, [pc, #112]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019d4:	f7fe fb96 	bl	8000104 <__udivsi3>
 80019d8:	0003      	movs	r3, r0
 80019da:	0019      	movs	r1, r3
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	227f      	movs	r2, #127	; 0x7f
 80019e4:	4013      	ands	r3, r2
 80019e6:	434b      	muls	r3, r1
 80019e8:	617b      	str	r3, [r7, #20]
        break;
 80019ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0f5b      	lsrs	r3, r3, #29
 80019f2:	2207      	movs	r2, #7
 80019f4:	4013      	ands	r3, r2
 80019f6:	3301      	adds	r3, #1
 80019f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	6978      	ldr	r0, [r7, #20]
 80019fe:	f7fe fb81 	bl	8000104 <__udivsi3>
 8001a02:	0003      	movs	r3, r0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	e015      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a08:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2238      	movs	r2, #56	; 0x38
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b20      	cmp	r3, #32
 8001a12:	d103      	bne.n	8001a1c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	021b      	lsls	r3, r3, #8
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2238      	movs	r2, #56	; 0x38
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b18      	cmp	r3, #24
 8001a26:	d103      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a28:	23fa      	movs	r3, #250	; 0xfa
 8001a2a:	01db      	lsls	r3, r3, #7
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	e001      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a34:	693b      	ldr	r3, [r7, #16]
}
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b006      	add	sp, #24
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	40021000 	.word	0x40021000
 8001a44:	00f42400 	.word	0x00f42400
 8001a48:	007a1200 	.word	0x007a1200

08001a4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a50:	4b02      	ldr	r3, [pc, #8]	; (8001a5c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	20000000 	.word	0x20000000

08001a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a64:	f7ff fff2 	bl	8001a4c <HAL_RCC_GetHCLKFreq>
 8001a68:	0004      	movs	r4, r0
 8001a6a:	f7ff fb39 	bl	80010e0 <LL_RCC_GetAPB1Prescaler>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	0b1a      	lsrs	r2, r3, #12
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	58d3      	ldr	r3, [r2, r3]
 8001a78:	221f      	movs	r2, #31
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	40dc      	lsrs	r4, r3
 8001a7e:	0023      	movs	r3, r4
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bdb0      	pop	{r4, r5, r7, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	08003970 	.word	0x08003970

08001a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001a94:	2313      	movs	r3, #19
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a9c:	2312      	movs	r3, #18
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	029b      	lsls	r3, r3, #10
 8001aac:	4013      	ands	r3, r2
 8001aae:	d100      	bne.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ab0:	e0a3      	b.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab2:	2011      	movs	r0, #17
 8001ab4:	183b      	adds	r3, r7, r0
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aba:	4ba5      	ldr	r3, [pc, #660]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	055b      	lsls	r3, r3, #21
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d110      	bne.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	4ba2      	ldr	r3, [pc, #648]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aca:	4ba1      	ldr	r3, [pc, #644]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001acc:	2180      	movs	r1, #128	; 0x80
 8001ace:	0549      	lsls	r1, r1, #21
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ad4:	4b9e      	ldr	r3, [pc, #632]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	055b      	lsls	r3, r3, #21
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae2:	183b      	adds	r3, r7, r0
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ae8:	4b9a      	ldr	r3, [pc, #616]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b99      	ldr	r3, [pc, #612]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	0049      	lsls	r1, r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001af6:	f7ff f849 	bl	8000b8c <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001afe:	e00b      	b.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b00:	f7ff f844 	bl	8000b8c <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d904      	bls.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001b0e:	2313      	movs	r3, #19
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2203      	movs	r2, #3
 8001b14:	701a      	strb	r2, [r3, #0]
        break;
 8001b16:	e005      	b.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b18:	4b8e      	ldr	r3, [pc, #568]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4013      	ands	r3, r2
 8001b22:	d0ed      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001b24:	2313      	movs	r3, #19
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d154      	bne.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b2e:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b32:	23c0      	movs	r3, #192	; 0xc0
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4013      	ands	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d019      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d014      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b4a:	4b81      	ldr	r3, [pc, #516]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4e:	4a82      	ldr	r2, [pc, #520]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b54:	4b7e      	ldr	r3, [pc, #504]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b58:	4b7d      	ldr	r3, [pc, #500]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b5a:	2180      	movs	r1, #128	; 0x80
 8001b5c:	0249      	lsls	r1, r1, #9
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b62:	4b7b      	ldr	r3, [pc, #492]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b66:	4b7a      	ldr	r3, [pc, #488]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b68:	497c      	ldr	r1, [pc, #496]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b6e:	4b78      	ldr	r3, [pc, #480]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2201      	movs	r2, #1
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d016      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f806 	bl	8000b8c <HAL_GetTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b84:	e00c      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7ff f801 	bl	8000b8c <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	4a73      	ldr	r2, [pc, #460]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d904      	bls.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001b96:	2313      	movs	r3, #19
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	701a      	strb	r2, [r3, #0]
            break;
 8001b9e:	e004      	b.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba0:	4b6b      	ldr	r3, [pc, #428]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d0ed      	beq.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001baa:	2313      	movs	r3, #19
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10a      	bne.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bb4:	4b66      	ldr	r3, [pc, #408]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb8:	4a67      	ldr	r2, [pc, #412]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bc2:	4b63      	ldr	r3, [pc, #396]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bc8:	e00c      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001bca:	2312      	movs	r3, #18
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	2213      	movs	r2, #19
 8001bd0:	18ba      	adds	r2, r7, r2
 8001bd2:	7812      	ldrb	r2, [r2, #0]
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	e005      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bd8:	2312      	movs	r3, #18
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	2213      	movs	r2, #19
 8001bde:	18ba      	adds	r2, r7, r2
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001be4:	2311      	movs	r3, #17
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d105      	bne.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bee:	4b58      	ldr	r3, [pc, #352]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bf2:	4b57      	ldr	r3, [pc, #348]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001bf4:	495b      	ldr	r1, [pc, #364]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4013      	ands	r3, r2
 8001c02:	d009      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c04:	4b52      	ldr	r3, [pc, #328]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c08:	2203      	movs	r2, #3
 8001c0a:	4393      	bics	r3, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4b4f      	ldr	r3, [pc, #316]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c14:	430a      	orrs	r2, r1
 8001c16:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d009      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c22:	4b4b      	ldr	r3, [pc, #300]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c26:	4a50      	ldr	r2, [pc, #320]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d009      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c42:	4b43      	ldr	r3, [pc, #268]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	4a49      	ldr	r2, [pc, #292]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c52:	430a      	orrs	r2, r1
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d009      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c62:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	4a42      	ldr	r2, [pc, #264]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699a      	ldr	r2, [r3, #24]
 8001c70:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c72:	430a      	orrs	r2, r1
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d009      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c80:	4b33      	ldr	r3, [pc, #204]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	4a3b      	ldr	r2, [pc, #236]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	0019      	movs	r1, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c90:	430a      	orrs	r2, r1
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	01db      	lsls	r3, r3, #7
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d015      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	0899      	lsrs	r1, r3, #2
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69da      	ldr	r2, [r3, #28]
 8001cac:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69da      	ldr	r2, [r3, #28]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	05db      	lsls	r3, r3, #23
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d106      	bne.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001cbe:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	0249      	lsls	r1, r1, #9
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	039b      	lsls	r3, r3, #14
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d016      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cdc:	4a26      	ldr	r2, [pc, #152]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1a      	ldr	r2, [r3, #32]
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1a      	ldr	r2, [r3, #32]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	03db      	lsls	r3, r3, #15
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d106      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	0449      	lsls	r1, r1, #17
 8001d02:	430a      	orrs	r2, r1
 8001d04:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d016      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d16:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d22:	430a      	orrs	r2, r1
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	01db      	lsls	r3, r3, #7
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d106      	bne.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	0249      	lsls	r1, r1, #9
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001d40:	2312      	movs	r3, #18
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	781b      	ldrb	r3, [r3, #0]
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b006      	add	sp, #24
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40007000 	.word	0x40007000
 8001d58:	fffffcff 	.word	0xfffffcff
 8001d5c:	fffeffff 	.word	0xfffeffff
 8001d60:	00001388 	.word	0x00001388
 8001d64:	efffffff 	.word	0xefffffff
 8001d68:	fffff3ff 	.word	0xfffff3ff
 8001d6c:	fff3ffff 	.word	0xfff3ffff
 8001d70:	ffcfffff 	.word	0xffcfffff
 8001d74:	ffffcfff 	.word	0xffffcfff
 8001d78:	ffbfffff 	.word	0xffbfffff
 8001d7c:	ffff3fff 	.word	0xffff3fff

08001d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e04a      	b.n	8001e28 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	223d      	movs	r2, #61	; 0x3d
 8001d96:	5c9b      	ldrb	r3, [r3, r2]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d107      	bne.n	8001dae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	223c      	movs	r2, #60	; 0x3c
 8001da2:	2100      	movs	r1, #0
 8001da4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7fe fd85 	bl	80008b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	223d      	movs	r2, #61	; 0x3d
 8001db2:	2102      	movs	r1, #2
 8001db4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	0010      	movs	r0, r2
 8001dc2:	f000 fbfd 	bl	80025c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2248      	movs	r2, #72	; 0x48
 8001dca:	2101      	movs	r1, #1
 8001dcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	223e      	movs	r2, #62	; 0x3e
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	5499      	strb	r1, [r3, r2]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	223f      	movs	r2, #63	; 0x3f
 8001dda:	2101      	movs	r1, #1
 8001ddc:	5499      	strb	r1, [r3, r2]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2240      	movs	r2, #64	; 0x40
 8001de2:	2101      	movs	r1, #1
 8001de4:	5499      	strb	r1, [r3, r2]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2241      	movs	r2, #65	; 0x41
 8001dea:	2101      	movs	r1, #1
 8001dec:	5499      	strb	r1, [r3, r2]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2242      	movs	r2, #66	; 0x42
 8001df2:	2101      	movs	r1, #1
 8001df4:	5499      	strb	r1, [r3, r2]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2243      	movs	r2, #67	; 0x43
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2244      	movs	r2, #68	; 0x44
 8001e02:	2101      	movs	r1, #1
 8001e04:	5499      	strb	r1, [r3, r2]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2245      	movs	r2, #69	; 0x45
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	5499      	strb	r1, [r3, r2]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2246      	movs	r2, #70	; 0x46
 8001e12:	2101      	movs	r1, #1
 8001e14:	5499      	strb	r1, [r3, r2]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2247      	movs	r2, #71	; 0x47
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	223d      	movs	r2, #61	; 0x3d
 8001e22:	2101      	movs	r1, #1
 8001e24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b002      	add	sp, #8
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	223d      	movs	r2, #61	; 0x3d
 8001e3c:	5c9b      	ldrb	r3, [r3, r2]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d001      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e03d      	b.n	8001ec4 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	223d      	movs	r2, #61	; 0x3d
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <HAL_TIM_Base_Start_IT+0x9c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00a      	beq.n	8001e80 <HAL_TIM_Base_Start_IT+0x50>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	05db      	lsls	r3, r3, #23
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d004      	beq.n	8001e80 <HAL_TIM_Base_Start_IT+0x50>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d116      	bne.n	8001eae <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <HAL_TIM_Base_Start_IT+0xa4>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d016      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x90>
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	025b      	lsls	r3, r3, #9
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d011      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eac:	e008      	b.n	8001ec0 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e000      	b.n	8001ec2 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b004      	add	sp, #16
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40012c00 	.word	0x40012c00
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	00010007 	.word	0x00010007

08001ed8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e04a      	b.n	8001f80 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	223d      	movs	r2, #61	; 0x3d
 8001eee:	5c9b      	ldrb	r3, [r3, r2]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d107      	bne.n	8001f06 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	223c      	movs	r2, #60	; 0x3c
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 f841 	bl	8001f88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	223d      	movs	r2, #61	; 0x3d
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3304      	adds	r3, #4
 8001f16:	0019      	movs	r1, r3
 8001f18:	0010      	movs	r0, r2
 8001f1a:	f000 fb51 	bl	80025c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2248      	movs	r2, #72	; 0x48
 8001f22:	2101      	movs	r1, #1
 8001f24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	223e      	movs	r2, #62	; 0x3e
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	5499      	strb	r1, [r3, r2]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	223f      	movs	r2, #63	; 0x3f
 8001f32:	2101      	movs	r1, #1
 8001f34:	5499      	strb	r1, [r3, r2]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2240      	movs	r2, #64	; 0x40
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	5499      	strb	r1, [r3, r2]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2241      	movs	r2, #65	; 0x41
 8001f42:	2101      	movs	r1, #1
 8001f44:	5499      	strb	r1, [r3, r2]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2242      	movs	r2, #66	; 0x42
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	5499      	strb	r1, [r3, r2]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2243      	movs	r2, #67	; 0x43
 8001f52:	2101      	movs	r1, #1
 8001f54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2244      	movs	r2, #68	; 0x44
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	5499      	strb	r1, [r3, r2]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2245      	movs	r2, #69	; 0x45
 8001f62:	2101      	movs	r1, #1
 8001f64:	5499      	strb	r1, [r3, r2]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2246      	movs	r2, #70	; 0x46
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	5499      	strb	r1, [r3, r2]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2247      	movs	r2, #71	; 0x47
 8001f72:	2101      	movs	r1, #1
 8001f74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	223d      	movs	r2, #61	; 0x3d
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d124      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d11d      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	4252      	negs	r2, r2
 8001fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d004      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f000 fad8 	bl	8002590 <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e007      	b.n	8001ff2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f000 facb 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	0018      	movs	r0, r3
 8001fee:	f000 fad7 	bl	80025a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2204      	movs	r2, #4
 8002000:	4013      	ands	r3, r2
 8002002:	2b04      	cmp	r3, #4
 8002004:	d125      	bne.n	8002052 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2204      	movs	r2, #4
 800200e:	4013      	ands	r3, r2
 8002010:	2b04      	cmp	r3, #4
 8002012:	d11e      	bne.n	8002052 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2205      	movs	r2, #5
 800201a:	4252      	negs	r2, r2
 800201c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699a      	ldr	r2, [r3, #24]
 800202a:	23c0      	movs	r3, #192	; 0xc0
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4013      	ands	r3, r2
 8002030:	d004      	beq.n	800203c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	0018      	movs	r0, r3
 8002036:	f000 faab 	bl	8002590 <HAL_TIM_IC_CaptureCallback>
 800203a:	e007      	b.n	800204c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	0018      	movs	r0, r3
 8002040:	f000 fa9e 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	0018      	movs	r0, r3
 8002048:	f000 faaa 	bl	80025a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	2208      	movs	r2, #8
 800205a:	4013      	ands	r3, r2
 800205c:	2b08      	cmp	r3, #8
 800205e:	d124      	bne.n	80020aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2208      	movs	r2, #8
 8002068:	4013      	ands	r3, r2
 800206a:	2b08      	cmp	r3, #8
 800206c:	d11d      	bne.n	80020aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2209      	movs	r2, #9
 8002074:	4252      	negs	r2, r2
 8002076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2204      	movs	r2, #4
 800207c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	2203      	movs	r2, #3
 8002086:	4013      	ands	r3, r2
 8002088:	d004      	beq.n	8002094 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	0018      	movs	r0, r3
 800208e:	f000 fa7f 	bl	8002590 <HAL_TIM_IC_CaptureCallback>
 8002092:	e007      	b.n	80020a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	0018      	movs	r0, r3
 8002098:	f000 fa72 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	0018      	movs	r0, r3
 80020a0:	f000 fa7e 	bl	80025a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	2210      	movs	r2, #16
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d125      	bne.n	8002104 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2210      	movs	r2, #16
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d11e      	bne.n	8002104 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2211      	movs	r2, #17
 80020cc:	4252      	negs	r2, r2
 80020ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2208      	movs	r2, #8
 80020d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	23c0      	movs	r3, #192	; 0xc0
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4013      	ands	r3, r2
 80020e2:	d004      	beq.n	80020ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f000 fa52 	bl	8002590 <HAL_TIM_IC_CaptureCallback>
 80020ec:	e007      	b.n	80020fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 fa45 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 fa51 	bl	80025a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2201      	movs	r2, #1
 800210c:	4013      	ands	r3, r2
 800210e:	2b01      	cmp	r3, #1
 8002110:	d10f      	bne.n	8002132 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	4013      	ands	r3, r2
 800211c:	2b01      	cmp	r3, #1
 800211e:	d108      	bne.n	8002132 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2202      	movs	r2, #2
 8002126:	4252      	negs	r2, r2
 8002128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	0018      	movs	r0, r3
 800212e:	f7fe f9ed 	bl	800050c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	4013      	ands	r3, r2
 800213c:	2b80      	cmp	r3, #128	; 0x80
 800213e:	d10f      	bne.n	8002160 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2280      	movs	r2, #128	; 0x80
 8002148:	4013      	ands	r3, r2
 800214a:	2b80      	cmp	r3, #128	; 0x80
 800214c:	d108      	bne.n	8002160 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2281      	movs	r2, #129	; 0x81
 8002154:	4252      	negs	r2, r2
 8002156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	0018      	movs	r0, r3
 800215c:	f000 fef4 	bl	8002f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	401a      	ands	r2, r3
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	429a      	cmp	r2, r3
 8002172:	d10e      	bne.n	8002192 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2280      	movs	r2, #128	; 0x80
 800217c:	4013      	ands	r3, r2
 800217e:	2b80      	cmp	r3, #128	; 0x80
 8002180:	d107      	bne.n	8002192 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <HAL_TIM_IRQHandler+0x260>)
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f000 fee3 	bl	8002f58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2240      	movs	r2, #64	; 0x40
 800219a:	4013      	ands	r3, r2
 800219c:	2b40      	cmp	r3, #64	; 0x40
 800219e:	d10f      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2240      	movs	r2, #64	; 0x40
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b40      	cmp	r3, #64	; 0x40
 80021ac:	d108      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2241      	movs	r2, #65	; 0x41
 80021b4:	4252      	negs	r2, r2
 80021b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	0018      	movs	r0, r3
 80021bc:	f000 f9f8 	bl	80025b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2220      	movs	r2, #32
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d10f      	bne.n	80021ee <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d108      	bne.n	80021ee <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2221      	movs	r2, #33	; 0x21
 80021e2:	4252      	negs	r2, r2
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 fea5 	bl	8002f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b002      	add	sp, #8
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	fffffeff 	.word	0xfffffeff

080021fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	223c      	movs	r2, #60	; 0x3c
 800220c:	5c9b      	ldrb	r3, [r3, r2]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002212:	2302      	movs	r3, #2
 8002214:	e0df      	b.n	80023d6 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	223c      	movs	r2, #60	; 0x3c
 800221a:	2101      	movs	r1, #1
 800221c:	5499      	strb	r1, [r3, r2]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b14      	cmp	r3, #20
 8002222:	d900      	bls.n	8002226 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002224:	e0d1      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	009a      	lsls	r2, r3, #2
 800222a:	4b6d      	ldr	r3, [pc, #436]	; (80023e0 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800222c:	18d3      	adds	r3, r2, r3
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	0011      	movs	r1, r2
 800223a:	0018      	movs	r0, r3
 800223c:	f000 fa36 	bl	80026ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2108      	movs	r1, #8
 800224c:	430a      	orrs	r2, r1
 800224e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2104      	movs	r1, #4
 800225c:	438a      	bics	r2, r1
 800225e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6999      	ldr	r1, [r3, #24]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	619a      	str	r2, [r3, #24]
      break;
 8002272:	e0ab      	b.n	80023cc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	0011      	movs	r1, r2
 800227c:	0018      	movs	r0, r3
 800227e:	f000 fa95 	bl	80027ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0109      	lsls	r1, r1, #4
 8002290:	430a      	orrs	r2, r1
 8002292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4951      	ldr	r1, [pc, #324]	; (80023e4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80022a0:	400a      	ands	r2, r1
 80022a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6999      	ldr	r1, [r3, #24]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	021a      	lsls	r2, r3, #8
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	619a      	str	r2, [r3, #24]
      break;
 80022b8:	e088      	b.n	80023cc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	0011      	movs	r1, r2
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 faf0 	bl	80028a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69da      	ldr	r2, [r3, #28]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2108      	movs	r1, #8
 80022d4:	430a      	orrs	r2, r1
 80022d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2104      	movs	r1, #4
 80022e4:	438a      	bics	r2, r1
 80022e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69d9      	ldr	r1, [r3, #28]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	61da      	str	r2, [r3, #28]
      break;
 80022fa:	e067      	b.n	80023cc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	0011      	movs	r1, r2
 8002304:	0018      	movs	r0, r3
 8002306:	f000 fb51 	bl	80029ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69da      	ldr	r2, [r3, #28]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2180      	movs	r1, #128	; 0x80
 8002316:	0109      	lsls	r1, r1, #4
 8002318:	430a      	orrs	r2, r1
 800231a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69da      	ldr	r2, [r3, #28]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	492f      	ldr	r1, [pc, #188]	; (80023e4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8002328:	400a      	ands	r2, r1
 800232a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69d9      	ldr	r1, [r3, #28]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	021a      	lsls	r2, r3, #8
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	61da      	str	r2, [r3, #28]
      break;
 8002340:	e044      	b.n	80023cc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	0011      	movs	r1, r2
 800234a:	0018      	movs	r0, r3
 800234c:	f000 fb92 	bl	8002a74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2108      	movs	r1, #8
 800235c:	430a      	orrs	r2, r1
 800235e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2104      	movs	r1, #4
 800236c:	438a      	bics	r2, r1
 800236e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002382:	e023      	b.n	80023cc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	0011      	movs	r1, r2
 800238c:	0018      	movs	r0, r3
 800238e:	f000 fbcb 	bl	8002b28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	0109      	lsls	r1, r1, #4
 80023a0:	430a      	orrs	r2, r1
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	490d      	ldr	r1, [pc, #52]	; (80023e4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80023b0:	400a      	ands	r2, r1
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	021a      	lsls	r2, r3, #8
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80023c8:	e000      	b.n	80023cc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80023ca:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	223c      	movs	r2, #60	; 0x3c
 80023d0:	2100      	movs	r1, #0
 80023d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	0018      	movs	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	b004      	add	sp, #16
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	08003990 	.word	0x08003990
 80023e4:	fffffbff 	.word	0xfffffbff

080023e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	223c      	movs	r2, #60	; 0x3c
 80023f6:	5c9b      	ldrb	r3, [r3, r2]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_TIM_ConfigClockSource+0x18>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0b7      	b.n	8002570 <HAL_TIM_ConfigClockSource+0x188>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	223c      	movs	r2, #60	; 0x3c
 8002404:	2101      	movs	r1, #1
 8002406:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	223d      	movs	r2, #61	; 0x3d
 800240c:	2102      	movs	r1, #2
 800240e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4a57      	ldr	r2, [pc, #348]	; (8002578 <HAL_TIM_ConfigClockSource+0x190>)
 800241c:	4013      	ands	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a56      	ldr	r2, [pc, #344]	; (800257c <HAL_TIM_ConfigClockSource+0x194>)
 8002424:	4013      	ands	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	0192      	lsls	r2, r2, #6
 8002438:	4293      	cmp	r3, r2
 800243a:	d040      	beq.n	80024be <HAL_TIM_ConfigClockSource+0xd6>
 800243c:	2280      	movs	r2, #128	; 0x80
 800243e:	0192      	lsls	r2, r2, #6
 8002440:	4293      	cmp	r3, r2
 8002442:	d900      	bls.n	8002446 <HAL_TIM_ConfigClockSource+0x5e>
 8002444:	e088      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x170>
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	0152      	lsls	r2, r2, #5
 800244a:	4293      	cmp	r3, r2
 800244c:	d100      	bne.n	8002450 <HAL_TIM_ConfigClockSource+0x68>
 800244e:	e085      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	0152      	lsls	r2, r2, #5
 8002454:	4293      	cmp	r3, r2
 8002456:	d900      	bls.n	800245a <HAL_TIM_ConfigClockSource+0x72>
 8002458:	e07e      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x170>
 800245a:	2b70      	cmp	r3, #112	; 0x70
 800245c:	d018      	beq.n	8002490 <HAL_TIM_ConfigClockSource+0xa8>
 800245e:	d900      	bls.n	8002462 <HAL_TIM_ConfigClockSource+0x7a>
 8002460:	e07a      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x170>
 8002462:	2b60      	cmp	r3, #96	; 0x60
 8002464:	d04f      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x11e>
 8002466:	d900      	bls.n	800246a <HAL_TIM_ConfigClockSource+0x82>
 8002468:	e076      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x170>
 800246a:	2b50      	cmp	r3, #80	; 0x50
 800246c:	d03b      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0xfe>
 800246e:	d900      	bls.n	8002472 <HAL_TIM_ConfigClockSource+0x8a>
 8002470:	e072      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x170>
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d057      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x13e>
 8002476:	d900      	bls.n	800247a <HAL_TIM_ConfigClockSource+0x92>
 8002478:	e06e      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x170>
 800247a:	2b30      	cmp	r3, #48	; 0x30
 800247c:	d063      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x15e>
 800247e:	d86b      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x170>
 8002480:	2b20      	cmp	r3, #32
 8002482:	d060      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x15e>
 8002484:	d868      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x170>
 8002486:	2b00      	cmp	r3, #0
 8002488:	d05d      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x15e>
 800248a:	2b10      	cmp	r3, #16
 800248c:	d05b      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800248e:	e063      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6899      	ldr	r1, [r3, #8]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f000 fc1c 	bl	8002cdc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2277      	movs	r2, #119	; 0x77
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	609a      	str	r2, [r3, #8]
      break;
 80024bc:	e04f      	b.n	800255e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6899      	ldr	r1, [r3, #8]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f000 fc05 	bl	8002cdc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2180      	movs	r1, #128	; 0x80
 80024de:	01c9      	lsls	r1, r1, #7
 80024e0:	430a      	orrs	r2, r1
 80024e2:	609a      	str	r2, [r3, #8]
      break;
 80024e4:	e03b      	b.n	800255e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	001a      	movs	r2, r3
 80024f4:	f000 fb76 	bl	8002be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2150      	movs	r1, #80	; 0x50
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 fbd0 	bl	8002ca4 <TIM_ITRx_SetConfig>
      break;
 8002504:	e02b      	b.n	800255e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6859      	ldr	r1, [r3, #4]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	001a      	movs	r2, r3
 8002514:	f000 fb94 	bl	8002c40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2160      	movs	r1, #96	; 0x60
 800251e:	0018      	movs	r0, r3
 8002520:	f000 fbc0 	bl	8002ca4 <TIM_ITRx_SetConfig>
      break;
 8002524:	e01b      	b.n	800255e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6859      	ldr	r1, [r3, #4]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	001a      	movs	r2, r3
 8002534:	f000 fb56 	bl	8002be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2140      	movs	r1, #64	; 0x40
 800253e:	0018      	movs	r0, r3
 8002540:	f000 fbb0 	bl	8002ca4 <TIM_ITRx_SetConfig>
      break;
 8002544:	e00b      	b.n	800255e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	0019      	movs	r1, r3
 8002550:	0010      	movs	r0, r2
 8002552:	f000 fba7 	bl	8002ca4 <TIM_ITRx_SetConfig>
        break;
 8002556:	e002      	b.n	800255e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	e000      	b.n	800255e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800255c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	223d      	movs	r2, #61	; 0x3d
 8002562:	2101      	movs	r1, #1
 8002564:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	223c      	movs	r2, #60	; 0x3c
 800256a:	2100      	movs	r1, #0
 800256c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	0018      	movs	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	b004      	add	sp, #16
 8002576:	bd80      	pop	{r7, pc}
 8002578:	ffceff88 	.word	0xffceff88
 800257c:	ffff00ff 	.word	0xffff00ff

08002580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b002      	add	sp, #8
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b002      	add	sp, #8
 80025be:	bd80      	pop	{r7, pc}

080025c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a30      	ldr	r2, [pc, #192]	; (8002694 <TIM_Base_SetConfig+0xd4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d008      	beq.n	80025ea <TIM_Base_SetConfig+0x2a>
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	05db      	lsls	r3, r3, #23
 80025de:	429a      	cmp	r2, r3
 80025e0:	d003      	beq.n	80025ea <TIM_Base_SetConfig+0x2a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a2c      	ldr	r2, [pc, #176]	; (8002698 <TIM_Base_SetConfig+0xd8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d108      	bne.n	80025fc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2270      	movs	r2, #112	; 0x70
 80025ee:	4393      	bics	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a25      	ldr	r2, [pc, #148]	; (8002694 <TIM_Base_SetConfig+0xd4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d014      	beq.n	800262e <TIM_Base_SetConfig+0x6e>
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	05db      	lsls	r3, r3, #23
 800260a:	429a      	cmp	r2, r3
 800260c:	d00f      	beq.n	800262e <TIM_Base_SetConfig+0x6e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a21      	ldr	r2, [pc, #132]	; (8002698 <TIM_Base_SetConfig+0xd8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00b      	beq.n	800262e <TIM_Base_SetConfig+0x6e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a20      	ldr	r2, [pc, #128]	; (800269c <TIM_Base_SetConfig+0xdc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d007      	beq.n	800262e <TIM_Base_SetConfig+0x6e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a1f      	ldr	r2, [pc, #124]	; (80026a0 <TIM_Base_SetConfig+0xe0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d003      	beq.n	800262e <TIM_Base_SetConfig+0x6e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <TIM_Base_SetConfig+0xe4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d108      	bne.n	8002640 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <TIM_Base_SetConfig+0xe8>)
 8002632:	4013      	ands	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2280      	movs	r2, #128	; 0x80
 8002644:	4393      	bics	r3, r2
 8002646:	001a      	movs	r2, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <TIM_Base_SetConfig+0xd4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <TIM_Base_SetConfig+0xbe>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a0b      	ldr	r2, [pc, #44]	; (80026a0 <TIM_Base_SetConfig+0xe0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d003      	beq.n	800267e <TIM_Base_SetConfig+0xbe>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <TIM_Base_SetConfig+0xe4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d103      	bne.n	8002686 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	615a      	str	r2, [r3, #20]
}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	b004      	add	sp, #16
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40012c00 	.word	0x40012c00
 8002698:	40000400 	.word	0x40000400
 800269c:	40002000 	.word	0x40002000
 80026a0:	40014400 	.word	0x40014400
 80026a4:	40014800 	.word	0x40014800
 80026a8:	fffffcff 	.word	0xfffffcff

080026ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	2201      	movs	r2, #1
 80026bc:	4393      	bics	r3, r2
 80026be:	001a      	movs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4a2e      	ldr	r2, [pc, #184]	; (8002794 <TIM_OC1_SetConfig+0xe8>)
 80026da:	4013      	ands	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2203      	movs	r2, #3
 80026e2:	4393      	bics	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2202      	movs	r2, #2
 80026f4:	4393      	bics	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a24      	ldr	r2, [pc, #144]	; (8002798 <TIM_OC1_SetConfig+0xec>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <TIM_OC1_SetConfig+0x6e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a23      	ldr	r2, [pc, #140]	; (800279c <TIM_OC1_SetConfig+0xf0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d003      	beq.n	800271a <TIM_OC1_SetConfig+0x6e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a22      	ldr	r2, [pc, #136]	; (80027a0 <TIM_OC1_SetConfig+0xf4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d10c      	bne.n	8002734 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2208      	movs	r2, #8
 800271e:	4393      	bics	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2204      	movs	r2, #4
 8002730:	4393      	bics	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a18      	ldr	r2, [pc, #96]	; (8002798 <TIM_OC1_SetConfig+0xec>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d007      	beq.n	800274c <TIM_OC1_SetConfig+0xa0>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a17      	ldr	r2, [pc, #92]	; (800279c <TIM_OC1_SetConfig+0xf0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d003      	beq.n	800274c <TIM_OC1_SetConfig+0xa0>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a16      	ldr	r2, [pc, #88]	; (80027a0 <TIM_OC1_SetConfig+0xf4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d111      	bne.n	8002770 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4a15      	ldr	r2, [pc, #84]	; (80027a4 <TIM_OC1_SetConfig+0xf8>)
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <TIM_OC1_SetConfig+0xfc>)
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	621a      	str	r2, [r3, #32]
}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	46bd      	mov	sp, r7
 800278e:	b006      	add	sp, #24
 8002790:	bd80      	pop	{r7, pc}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	fffeff8f 	.word	0xfffeff8f
 8002798:	40012c00 	.word	0x40012c00
 800279c:	40014400 	.word	0x40014400
 80027a0:	40014800 	.word	0x40014800
 80027a4:	fffffeff 	.word	0xfffffeff
 80027a8:	fffffdff 	.word	0xfffffdff

080027ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	2210      	movs	r2, #16
 80027bc:	4393      	bics	r3, r2
 80027be:	001a      	movs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a2c      	ldr	r2, [pc, #176]	; (800288c <TIM_OC2_SetConfig+0xe0>)
 80027da:	4013      	ands	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4a2b      	ldr	r2, [pc, #172]	; (8002890 <TIM_OC2_SetConfig+0xe4>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2220      	movs	r2, #32
 80027f6:	4393      	bics	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a22      	ldr	r2, [pc, #136]	; (8002894 <TIM_OC2_SetConfig+0xe8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d10d      	bne.n	800282a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2280      	movs	r2, #128	; 0x80
 8002812:	4393      	bics	r3, r2
 8002814:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2240      	movs	r2, #64	; 0x40
 8002826:	4393      	bics	r3, r2
 8002828:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a19      	ldr	r2, [pc, #100]	; (8002894 <TIM_OC2_SetConfig+0xe8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <TIM_OC2_SetConfig+0x96>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a18      	ldr	r2, [pc, #96]	; (8002898 <TIM_OC2_SetConfig+0xec>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d003      	beq.n	8002842 <TIM_OC2_SetConfig+0x96>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a17      	ldr	r2, [pc, #92]	; (800289c <TIM_OC2_SetConfig+0xf0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d113      	bne.n	800286a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <TIM_OC2_SetConfig+0xf4>)
 8002846:	4013      	ands	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <TIM_OC2_SetConfig+0xf8>)
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	621a      	str	r2, [r3, #32]
}
 8002884:	46c0      	nop			; (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	b006      	add	sp, #24
 800288a:	bd80      	pop	{r7, pc}
 800288c:	feff8fff 	.word	0xfeff8fff
 8002890:	fffffcff 	.word	0xfffffcff
 8002894:	40012c00 	.word	0x40012c00
 8002898:	40014400 	.word	0x40014400
 800289c:	40014800 	.word	0x40014800
 80028a0:	fffffbff 	.word	0xfffffbff
 80028a4:	fffff7ff 	.word	0xfffff7ff

080028a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	4a33      	ldr	r2, [pc, #204]	; (8002984 <TIM_OC3_SetConfig+0xdc>)
 80028b8:	401a      	ands	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <TIM_OC3_SetConfig+0xe0>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2203      	movs	r2, #3
 80028dc:	4393      	bics	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	4a27      	ldr	r2, [pc, #156]	; (800298c <TIM_OC3_SetConfig+0xe4>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a23      	ldr	r2, [pc, #140]	; (8002990 <TIM_OC3_SetConfig+0xe8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d10d      	bne.n	8002922 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	4a22      	ldr	r2, [pc, #136]	; (8002994 <TIM_OC3_SetConfig+0xec>)
 800290a:	4013      	ands	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <TIM_OC3_SetConfig+0xf0>)
 800291e:	4013      	ands	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <TIM_OC3_SetConfig+0xe8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d007      	beq.n	800293a <TIM_OC3_SetConfig+0x92>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1b      	ldr	r2, [pc, #108]	; (800299c <TIM_OC3_SetConfig+0xf4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d003      	beq.n	800293a <TIM_OC3_SetConfig+0x92>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a1a      	ldr	r2, [pc, #104]	; (80029a0 <TIM_OC3_SetConfig+0xf8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d113      	bne.n	8002962 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <TIM_OC3_SetConfig+0xfc>)
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <TIM_OC3_SetConfig+0x100>)
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	621a      	str	r2, [r3, #32]
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b006      	add	sp, #24
 8002982:	bd80      	pop	{r7, pc}
 8002984:	fffffeff 	.word	0xfffffeff
 8002988:	fffeff8f 	.word	0xfffeff8f
 800298c:	fffffdff 	.word	0xfffffdff
 8002990:	40012c00 	.word	0x40012c00
 8002994:	fffff7ff 	.word	0xfffff7ff
 8002998:	fffffbff 	.word	0xfffffbff
 800299c:	40014400 	.word	0x40014400
 80029a0:	40014800 	.word	0x40014800
 80029a4:	ffffefff 	.word	0xffffefff
 80029a8:	ffffdfff 	.word	0xffffdfff

080029ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	4a26      	ldr	r2, [pc, #152]	; (8002a54 <TIM_OC4_SetConfig+0xa8>)
 80029bc:	401a      	ands	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a20      	ldr	r2, [pc, #128]	; (8002a58 <TIM_OC4_SetConfig+0xac>)
 80029d8:	4013      	ands	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <TIM_OC4_SetConfig+0xb0>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <TIM_OC4_SetConfig+0xb4>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	031b      	lsls	r3, r3, #12
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <TIM_OC4_SetConfig+0xb8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d007      	beq.n	8002a1c <TIM_OC4_SetConfig+0x70>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <TIM_OC4_SetConfig+0xbc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <TIM_OC4_SetConfig+0x70>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <TIM_OC4_SetConfig+0xc0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d109      	bne.n	8002a30 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	4a14      	ldr	r2, [pc, #80]	; (8002a70 <TIM_OC4_SetConfig+0xc4>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	019b      	lsls	r3, r3, #6
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	621a      	str	r2, [r3, #32]
}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b006      	add	sp, #24
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	ffffefff 	.word	0xffffefff
 8002a58:	feff8fff 	.word	0xfeff8fff
 8002a5c:	fffffcff 	.word	0xfffffcff
 8002a60:	ffffdfff 	.word	0xffffdfff
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40014400 	.word	0x40014400
 8002a6c:	40014800 	.word	0x40014800
 8002a70:	ffffbfff 	.word	0xffffbfff

08002a74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4a23      	ldr	r2, [pc, #140]	; (8002b10 <TIM_OC5_SetConfig+0x9c>)
 8002a84:	401a      	ands	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <TIM_OC5_SetConfig+0xa0>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4a19      	ldr	r2, [pc, #100]	; (8002b18 <TIM_OC5_SetConfig+0xa4>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	041b      	lsls	r3, r3, #16
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a15      	ldr	r2, [pc, #84]	; (8002b1c <TIM_OC5_SetConfig+0xa8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d007      	beq.n	8002ada <TIM_OC5_SetConfig+0x66>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <TIM_OC5_SetConfig+0xac>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <TIM_OC5_SetConfig+0x66>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <TIM_OC5_SetConfig+0xb0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d109      	bne.n	8002aee <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	4a0c      	ldr	r2, [pc, #48]	; (8002b10 <TIM_OC5_SetConfig+0x9c>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	621a      	str	r2, [r3, #32]
}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b006      	add	sp, #24
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	fffeffff 	.word	0xfffeffff
 8002b14:	fffeff8f 	.word	0xfffeff8f
 8002b18:	fffdffff 	.word	0xfffdffff
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	40014400 	.word	0x40014400
 8002b24:	40014800 	.word	0x40014800

08002b28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4a24      	ldr	r2, [pc, #144]	; (8002bc8 <TIM_OC6_SetConfig+0xa0>)
 8002b38:	401a      	ands	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a1e      	ldr	r2, [pc, #120]	; (8002bcc <TIM_OC6_SetConfig+0xa4>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4a1a      	ldr	r2, [pc, #104]	; (8002bd0 <TIM_OC6_SetConfig+0xa8>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	051b      	lsls	r3, r3, #20
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a16      	ldr	r2, [pc, #88]	; (8002bd4 <TIM_OC6_SetConfig+0xac>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d007      	beq.n	8002b90 <TIM_OC6_SetConfig+0x68>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a15      	ldr	r2, [pc, #84]	; (8002bd8 <TIM_OC6_SetConfig+0xb0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d003      	beq.n	8002b90 <TIM_OC6_SetConfig+0x68>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <TIM_OC6_SetConfig+0xb4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d109      	bne.n	8002ba4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <TIM_OC6_SetConfig+0xb8>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	029b      	lsls	r3, r3, #10
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	621a      	str	r2, [r3, #32]
}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	b006      	add	sp, #24
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	ffefffff 	.word	0xffefffff
 8002bcc:	feff8fff 	.word	0xfeff8fff
 8002bd0:	ffdfffff 	.word	0xffdfffff
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40014400 	.word	0x40014400
 8002bdc:	40014800 	.word	0x40014800
 8002be0:	fffbffff 	.word	0xfffbffff

08002be4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4393      	bics	r3, r2
 8002bfe:	001a      	movs	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	22f0      	movs	r2, #240	; 0xf0
 8002c0e:	4393      	bics	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	220a      	movs	r2, #10
 8002c20:	4393      	bics	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	621a      	str	r2, [r3, #32]
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b006      	add	sp, #24
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	2210      	movs	r2, #16
 8002c52:	4393      	bics	r3, r2
 8002c54:	001a      	movs	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <TIM_TI2_ConfigInputStage+0x60>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	031b      	lsls	r3, r3, #12
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	22a0      	movs	r2, #160	; 0xa0
 8002c7c:	4393      	bics	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	621a      	str	r2, [r3, #32]
}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b006      	add	sp, #24
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	ffff0fff 	.word	0xffff0fff

08002ca4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <TIM_ITRx_SetConfig+0x34>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	609a      	str	r2, [r3, #8]
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b004      	add	sp, #16
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	ffcfff8f 	.word	0xffcfff8f

08002cdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <TIM_ETR_SetConfig+0x3c>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	021a      	lsls	r2, r3, #8
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	609a      	str	r2, [r3, #8]
}
 8002d10:	46c0      	nop			; (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b006      	add	sp, #24
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	ffff00ff 	.word	0xffff00ff

08002d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	223c      	movs	r2, #60	; 0x3c
 8002d2a:	5c9b      	ldrb	r3, [r3, r2]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e050      	b.n	8002dd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	223c      	movs	r2, #60	; 0x3c
 8002d38:	2101      	movs	r1, #1
 8002d3a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	223d      	movs	r2, #61	; 0x3d
 8002d40:	2102      	movs	r1, #2
 8002d42:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d108      	bne.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2270      	movs	r2, #112	; 0x70
 8002d74:	4393      	bics	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00a      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	05db      	lsls	r3, r3, #23
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d004      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d10c      	bne.n	8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2280      	movs	r2, #128	; 0x80
 8002dae:	4393      	bics	r3, r2
 8002db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	223d      	movs	r2, #61	; 0x3d
 8002dc8:	2101      	movs	r1, #1
 8002dca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	223c      	movs	r2, #60	; 0x3c
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b004      	add	sp, #16
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	ff0fffff 	.word	0xff0fffff
 8002de8:	40000400 	.word	0x40000400

08002dec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	223c      	movs	r2, #60	; 0x3c
 8002dfe:	5c9b      	ldrb	r3, [r3, r2]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e079      	b.n	8002efc <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	223c      	movs	r2, #60	; 0x3c
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	22ff      	movs	r2, #255	; 0xff
 8002e14:	4393      	bics	r3, r2
 8002e16:	001a      	movs	r2, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002e24:	401a      	ands	r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a35      	ldr	r2, [pc, #212]	; (8002f08 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002e32:	401a      	ands	r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a33      	ldr	r2, [pc, #204]	; (8002f0c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002e40:	401a      	ands	r2, r3
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a30      	ldr	r2, [pc, #192]	; (8002f10 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002e4e:	401a      	ands	r2, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4a2e      	ldr	r2, [pc, #184]	; (8002f14 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a2b      	ldr	r2, [pc, #172]	; (8002f18 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a29      	ldr	r2, [pc, #164]	; (8002f1c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002e78:	401a      	ands	r2, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a25      	ldr	r2, [pc, #148]	; (8002f20 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d106      	bne.n	8002e9c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4a24      	ldr	r2, [pc, #144]	; (8002f24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002e92:	401a      	ands	r2, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1f      	ldr	r2, [pc, #124]	; (8002f20 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d121      	bne.n	8002eea <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4a1f      	ldr	r2, [pc, #124]	; (8002f28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002eaa:	401a      	ands	r2, r3
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	051b      	lsls	r3, r3, #20
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8002eba:	401a      	ands	r2, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a1a      	ldr	r2, [pc, #104]	; (8002f30 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8002ec8:	401a      	ands	r2, r3
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a12      	ldr	r2, [pc, #72]	; (8002f20 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d106      	bne.n	8002eea <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	223c      	movs	r2, #60	; 0x3c
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b004      	add	sp, #16
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	fffffcff 	.word	0xfffffcff
 8002f08:	fffffbff 	.word	0xfffffbff
 8002f0c:	fffff7ff 	.word	0xfffff7ff
 8002f10:	ffffefff 	.word	0xffffefff
 8002f14:	ffffdfff 	.word	0xffffdfff
 8002f18:	ffffbfff 	.word	0xffffbfff
 8002f1c:	fff0ffff 	.word	0xfff0ffff
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	efffffff 	.word	0xefffffff
 8002f28:	ff0fffff 	.word	0xff0fffff
 8002f2c:	feffffff 	.word	0xfeffffff
 8002f30:	fdffffff 	.word	0xfdffffff
 8002f34:	dfffffff 	.word	0xdfffffff

08002f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b002      	add	sp, #8
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e046      	b.n	8003008 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2284      	movs	r2, #132	; 0x84
 8002f7e:	589b      	ldr	r3, [r3, r2]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d107      	bne.n	8002f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2280      	movs	r2, #128	; 0x80
 8002f88:	2100      	movs	r1, #0
 8002f8a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7fd fd0c 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2284      	movs	r2, #132	; 0x84
 8002f98:	2124      	movs	r1, #36	; 0x24
 8002f9a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	438a      	bics	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 f830 	bl	8003014 <UART_SetConfig>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e024      	b.n	8003008 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 fab3 	bl	8003534 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	490d      	ldr	r1, [pc, #52]	; (8003010 <HAL_UART_Init+0xa8>)
 8002fda:	400a      	ands	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	212a      	movs	r1, #42	; 0x2a
 8002fea:	438a      	bics	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	0018      	movs	r0, r3
 8003002:	f000 fb4b 	bl	800369c <UART_CheckIdleState>
 8003006:	0003      	movs	r3, r0
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b002      	add	sp, #8
 800300e:	bd80      	pop	{r7, pc}
 8003010:	ffffb7ff 	.word	0xffffb7ff

08003014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003014:	b5b0      	push	{r4, r5, r7, lr}
 8003016:	b090      	sub	sp, #64	; 0x40
 8003018:	af00      	add	r7, sp, #0
 800301a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800301c:	231a      	movs	r3, #26
 800301e:	2220      	movs	r2, #32
 8003020:	4694      	mov	ip, r2
 8003022:	44bc      	add	ip, r7
 8003024:	4463      	add	r3, ip
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	431a      	orrs	r2, r3
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	431a      	orrs	r2, r3
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4313      	orrs	r3, r2
 8003040:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4ac7      	ldr	r2, [pc, #796]	; (8003368 <UART_SetConfig+0x354>)
 800304a:	4013      	ands	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003054:	430b      	orrs	r3, r1
 8003056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4ac3      	ldr	r2, [pc, #780]	; (800336c <UART_SetConfig+0x358>)
 8003060:	4013      	ands	r3, r2
 8003062:	0018      	movs	r0, r3
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	68d9      	ldr	r1, [r3, #12]
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	0003      	movs	r3, r0
 800306e:	430b      	orrs	r3, r1
 8003070:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4abc      	ldr	r2, [pc, #752]	; (8003370 <UART_SetConfig+0x35c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003088:	4313      	orrs	r3, r2
 800308a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	4ab8      	ldr	r2, [pc, #736]	; (8003374 <UART_SetConfig+0x360>)
 8003094:	4013      	ands	r3, r2
 8003096:	0019      	movs	r1, r3
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309e:	430b      	orrs	r3, r1
 80030a0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	220f      	movs	r2, #15
 80030aa:	4393      	bics	r3, r2
 80030ac:	0018      	movs	r0, r3
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	0003      	movs	r3, r0
 80030b8:	430b      	orrs	r3, r1
 80030ba:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4aad      	ldr	r2, [pc, #692]	; (8003378 <UART_SetConfig+0x364>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d136      	bne.n	8003134 <UART_SetConfig+0x120>
 80030c6:	4bad      	ldr	r3, [pc, #692]	; (800337c <UART_SetConfig+0x368>)
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	2203      	movs	r2, #3
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d020      	beq.n	8003114 <UART_SetConfig+0x100>
 80030d2:	d827      	bhi.n	8003124 <UART_SetConfig+0x110>
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d00d      	beq.n	80030f4 <UART_SetConfig+0xe0>
 80030d8:	d824      	bhi.n	8003124 <UART_SetConfig+0x110>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <UART_SetConfig+0xd0>
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d010      	beq.n	8003104 <UART_SetConfig+0xf0>
 80030e2:	e01f      	b.n	8003124 <UART_SetConfig+0x110>
 80030e4:	231b      	movs	r3, #27
 80030e6:	2220      	movs	r2, #32
 80030e8:	4694      	mov	ip, r2
 80030ea:	44bc      	add	ip, r7
 80030ec:	4463      	add	r3, ip
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e07c      	b.n	80031ee <UART_SetConfig+0x1da>
 80030f4:	231b      	movs	r3, #27
 80030f6:	2220      	movs	r2, #32
 80030f8:	4694      	mov	ip, r2
 80030fa:	44bc      	add	ip, r7
 80030fc:	4463      	add	r3, ip
 80030fe:	2202      	movs	r2, #2
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e074      	b.n	80031ee <UART_SetConfig+0x1da>
 8003104:	231b      	movs	r3, #27
 8003106:	2220      	movs	r2, #32
 8003108:	4694      	mov	ip, r2
 800310a:	44bc      	add	ip, r7
 800310c:	4463      	add	r3, ip
 800310e:	2204      	movs	r2, #4
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e06c      	b.n	80031ee <UART_SetConfig+0x1da>
 8003114:	231b      	movs	r3, #27
 8003116:	2220      	movs	r2, #32
 8003118:	4694      	mov	ip, r2
 800311a:	44bc      	add	ip, r7
 800311c:	4463      	add	r3, ip
 800311e:	2208      	movs	r2, #8
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e064      	b.n	80031ee <UART_SetConfig+0x1da>
 8003124:	231b      	movs	r3, #27
 8003126:	2220      	movs	r2, #32
 8003128:	4694      	mov	ip, r2
 800312a:	44bc      	add	ip, r7
 800312c:	4463      	add	r3, ip
 800312e:	2210      	movs	r2, #16
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	e05c      	b.n	80031ee <UART_SetConfig+0x1da>
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a91      	ldr	r2, [pc, #580]	; (8003380 <UART_SetConfig+0x36c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d107      	bne.n	800314e <UART_SetConfig+0x13a>
 800313e:	231b      	movs	r3, #27
 8003140:	2220      	movs	r2, #32
 8003142:	4694      	mov	ip, r2
 8003144:	44bc      	add	ip, r7
 8003146:	4463      	add	r3, ip
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	e04f      	b.n	80031ee <UART_SetConfig+0x1da>
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a87      	ldr	r2, [pc, #540]	; (8003370 <UART_SetConfig+0x35c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d143      	bne.n	80031e0 <UART_SetConfig+0x1cc>
 8003158:	4b88      	ldr	r3, [pc, #544]	; (800337c <UART_SetConfig+0x368>)
 800315a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800315c:	23c0      	movs	r3, #192	; 0xc0
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	4013      	ands	r3, r2
 8003162:	22c0      	movs	r2, #192	; 0xc0
 8003164:	0112      	lsls	r2, r2, #4
 8003166:	4293      	cmp	r3, r2
 8003168:	d02a      	beq.n	80031c0 <UART_SetConfig+0x1ac>
 800316a:	22c0      	movs	r2, #192	; 0xc0
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	4293      	cmp	r3, r2
 8003170:	d82e      	bhi.n	80031d0 <UART_SetConfig+0x1bc>
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	0112      	lsls	r2, r2, #4
 8003176:	4293      	cmp	r3, r2
 8003178:	d012      	beq.n	80031a0 <UART_SetConfig+0x18c>
 800317a:	2280      	movs	r2, #128	; 0x80
 800317c:	0112      	lsls	r2, r2, #4
 800317e:	4293      	cmp	r3, r2
 8003180:	d826      	bhi.n	80031d0 <UART_SetConfig+0x1bc>
 8003182:	2b00      	cmp	r3, #0
 8003184:	d004      	beq.n	8003190 <UART_SetConfig+0x17c>
 8003186:	2280      	movs	r2, #128	; 0x80
 8003188:	00d2      	lsls	r2, r2, #3
 800318a:	4293      	cmp	r3, r2
 800318c:	d010      	beq.n	80031b0 <UART_SetConfig+0x19c>
 800318e:	e01f      	b.n	80031d0 <UART_SetConfig+0x1bc>
 8003190:	231b      	movs	r3, #27
 8003192:	2220      	movs	r2, #32
 8003194:	4694      	mov	ip, r2
 8003196:	44bc      	add	ip, r7
 8003198:	4463      	add	r3, ip
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e026      	b.n	80031ee <UART_SetConfig+0x1da>
 80031a0:	231b      	movs	r3, #27
 80031a2:	2220      	movs	r2, #32
 80031a4:	4694      	mov	ip, r2
 80031a6:	44bc      	add	ip, r7
 80031a8:	4463      	add	r3, ip
 80031aa:	2202      	movs	r2, #2
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	e01e      	b.n	80031ee <UART_SetConfig+0x1da>
 80031b0:	231b      	movs	r3, #27
 80031b2:	2220      	movs	r2, #32
 80031b4:	4694      	mov	ip, r2
 80031b6:	44bc      	add	ip, r7
 80031b8:	4463      	add	r3, ip
 80031ba:	2204      	movs	r2, #4
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e016      	b.n	80031ee <UART_SetConfig+0x1da>
 80031c0:	231b      	movs	r3, #27
 80031c2:	2220      	movs	r2, #32
 80031c4:	4694      	mov	ip, r2
 80031c6:	44bc      	add	ip, r7
 80031c8:	4463      	add	r3, ip
 80031ca:	2208      	movs	r2, #8
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e00e      	b.n	80031ee <UART_SetConfig+0x1da>
 80031d0:	231b      	movs	r3, #27
 80031d2:	2220      	movs	r2, #32
 80031d4:	4694      	mov	ip, r2
 80031d6:	44bc      	add	ip, r7
 80031d8:	4463      	add	r3, ip
 80031da:	2210      	movs	r2, #16
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e006      	b.n	80031ee <UART_SetConfig+0x1da>
 80031e0:	231b      	movs	r3, #27
 80031e2:	2220      	movs	r2, #32
 80031e4:	4694      	mov	ip, r2
 80031e6:	44bc      	add	ip, r7
 80031e8:	4463      	add	r3, ip
 80031ea:	2210      	movs	r2, #16
 80031ec:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a5f      	ldr	r2, [pc, #380]	; (8003370 <UART_SetConfig+0x35c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d000      	beq.n	80031fa <UART_SetConfig+0x1e6>
 80031f8:	e096      	b.n	8003328 <UART_SetConfig+0x314>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031fa:	231b      	movs	r3, #27
 80031fc:	2220      	movs	r2, #32
 80031fe:	4694      	mov	ip, r2
 8003200:	44bc      	add	ip, r7
 8003202:	4463      	add	r3, ip
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b08      	cmp	r3, #8
 8003208:	d015      	beq.n	8003236 <UART_SetConfig+0x222>
 800320a:	dc18      	bgt.n	800323e <UART_SetConfig+0x22a>
 800320c:	2b04      	cmp	r3, #4
 800320e:	d00d      	beq.n	800322c <UART_SetConfig+0x218>
 8003210:	dc15      	bgt.n	800323e <UART_SetConfig+0x22a>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <UART_SetConfig+0x208>
 8003216:	2b02      	cmp	r3, #2
 8003218:	d005      	beq.n	8003226 <UART_SetConfig+0x212>
 800321a:	e010      	b.n	800323e <UART_SetConfig+0x22a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800321c:	f7fe fc20 	bl	8001a60 <HAL_RCC_GetPCLK1Freq>
 8003220:	0003      	movs	r3, r0
 8003222:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003224:	e015      	b.n	8003252 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003226:	4b57      	ldr	r3, [pc, #348]	; (8003384 <UART_SetConfig+0x370>)
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800322a:	e012      	b.n	8003252 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800322c:	f7fe fb8c 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8003230:	0003      	movs	r3, r0
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003234:	e00d      	b.n	8003252 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800323c:	e009      	b.n	8003252 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003242:	231a      	movs	r3, #26
 8003244:	2220      	movs	r2, #32
 8003246:	4694      	mov	ip, r2
 8003248:	44bc      	add	ip, r7
 800324a:	4463      	add	r3, ip
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
        break;
 8003250:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003254:	2b00      	cmp	r3, #0
 8003256:	d100      	bne.n	800325a <UART_SetConfig+0x246>
 8003258:	e14f      	b.n	80034fa <UART_SetConfig+0x4e6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325e:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <UART_SetConfig+0x374>)
 8003260:	0052      	lsls	r2, r2, #1
 8003262:	5ad3      	ldrh	r3, [r2, r3]
 8003264:	0019      	movs	r1, r3
 8003266:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003268:	f7fc ff4c 	bl	8000104 <__udivsi3>
 800326c:	0003      	movs	r3, r0
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	0013      	movs	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	189b      	adds	r3, r3, r2
 800327a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800327c:	429a      	cmp	r2, r3
 800327e:	d305      	bcc.n	800328c <UART_SetConfig+0x278>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003288:	429a      	cmp	r2, r3
 800328a:	d907      	bls.n	800329c <UART_SetConfig+0x288>
      {
        ret = HAL_ERROR;
 800328c:	231a      	movs	r3, #26
 800328e:	2220      	movs	r2, #32
 8003290:	4694      	mov	ip, r2
 8003292:	44bc      	add	ip, r7
 8003294:	4463      	add	r3, ip
 8003296:	2201      	movs	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e12e      	b.n	80034fa <UART_SetConfig+0x4e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329e:	61bb      	str	r3, [r7, #24]
 80032a0:	2300      	movs	r3, #0
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a8:	4b37      	ldr	r3, [pc, #220]	; (8003388 <UART_SetConfig+0x374>)
 80032aa:	0052      	lsls	r2, r2, #1
 80032ac:	5ad3      	ldrh	r3, [r2, r3]
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	69b8      	ldr	r0, [r7, #24]
 80032ba:	69f9      	ldr	r1, [r7, #28]
 80032bc:	f7fc ffae 	bl	800021c <__aeabi_uldivmod>
 80032c0:	0002      	movs	r2, r0
 80032c2:	000b      	movs	r3, r1
 80032c4:	0e11      	lsrs	r1, r2, #24
 80032c6:	021d      	lsls	r5, r3, #8
 80032c8:	430d      	orrs	r5, r1
 80032ca:	0214      	lsls	r4, r2, #8
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	2300      	movs	r3, #0
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68b8      	ldr	r0, [r7, #8]
 80032da:	68f9      	ldr	r1, [r7, #12]
 80032dc:	1900      	adds	r0, r0, r4
 80032de:	4169      	adcs	r1, r5
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f7fc ff95 	bl	800021c <__aeabi_uldivmod>
 80032f2:	0002      	movs	r2, r0
 80032f4:	000b      	movs	r3, r1
 80032f6:	0013      	movs	r3, r2
 80032f8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032fc:	23c0      	movs	r3, #192	; 0xc0
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	429a      	cmp	r2, r3
 8003302:	d309      	bcc.n	8003318 <UART_SetConfig+0x304>
 8003304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	035b      	lsls	r3, r3, #13
 800330a:	429a      	cmp	r2, r3
 800330c:	d204      	bcs.n	8003318 <UART_SetConfig+0x304>
        {
          huart->Instance->BRR = usartdiv;
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	e0f0      	b.n	80034fa <UART_SetConfig+0x4e6>
        }
        else
        {
          ret = HAL_ERROR;
 8003318:	231a      	movs	r3, #26
 800331a:	2220      	movs	r2, #32
 800331c:	4694      	mov	ip, r2
 800331e:	44bc      	add	ip, r7
 8003320:	4463      	add	r3, ip
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e0e8      	b.n	80034fa <UART_SetConfig+0x4e6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	69da      	ldr	r2, [r3, #28]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	429a      	cmp	r2, r3
 8003332:	d000      	beq.n	8003336 <UART_SetConfig+0x322>
 8003334:	e086      	b.n	8003444 <UART_SetConfig+0x430>
  {
    switch (clocksource)
 8003336:	231b      	movs	r3, #27
 8003338:	2220      	movs	r2, #32
 800333a:	4694      	mov	ip, r2
 800333c:	44bc      	add	ip, r7
 800333e:	4463      	add	r3, ip
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b08      	cmp	r3, #8
 8003344:	d027      	beq.n	8003396 <UART_SetConfig+0x382>
 8003346:	dc2a      	bgt.n	800339e <UART_SetConfig+0x38a>
 8003348:	2b04      	cmp	r3, #4
 800334a:	d01f      	beq.n	800338c <UART_SetConfig+0x378>
 800334c:	dc27      	bgt.n	800339e <UART_SetConfig+0x38a>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <UART_SetConfig+0x344>
 8003352:	2b02      	cmp	r3, #2
 8003354:	d005      	beq.n	8003362 <UART_SetConfig+0x34e>
 8003356:	e022      	b.n	800339e <UART_SetConfig+0x38a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003358:	f7fe fb82 	bl	8001a60 <HAL_RCC_GetPCLK1Freq>
 800335c:	0003      	movs	r3, r0
 800335e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003360:	e027      	b.n	80033b2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003362:	4b08      	ldr	r3, [pc, #32]	; (8003384 <UART_SetConfig+0x370>)
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003366:	e024      	b.n	80033b2 <UART_SetConfig+0x39e>
 8003368:	cfff69f3 	.word	0xcfff69f3
 800336c:	ffffcfff 	.word	0xffffcfff
 8003370:	40008000 	.word	0x40008000
 8003374:	11fff4ff 	.word	0x11fff4ff
 8003378:	40013800 	.word	0x40013800
 800337c:	40021000 	.word	0x40021000
 8003380:	40004400 	.word	0x40004400
 8003384:	00f42400 	.word	0x00f42400
 8003388:	080039e4 	.word	0x080039e4
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800338c:	f7fe fadc 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8003390:	0003      	movs	r3, r0
 8003392:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003394:	e00d      	b.n	80033b2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800339c:	e009      	b.n	80033b2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80033a2:	231a      	movs	r3, #26
 80033a4:	2220      	movs	r2, #32
 80033a6:	4694      	mov	ip, r2
 80033a8:	44bc      	add	ip, r7
 80033aa:	4463      	add	r3, ip
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
        break;
 80033b0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d100      	bne.n	80033ba <UART_SetConfig+0x3a6>
 80033b8:	e09f      	b.n	80034fa <UART_SetConfig+0x4e6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033be:	4b5b      	ldr	r3, [pc, #364]	; (800352c <UART_SetConfig+0x518>)
 80033c0:	0052      	lsls	r2, r2, #1
 80033c2:	5ad3      	ldrh	r3, [r2, r3]
 80033c4:	0019      	movs	r1, r3
 80033c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80033c8:	f7fc fe9c 	bl	8000104 <__udivsi3>
 80033cc:	0003      	movs	r3, r0
 80033ce:	005a      	lsls	r2, r3, #1
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	085b      	lsrs	r3, r3, #1
 80033d6:	18d2      	adds	r2, r2, r3
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	0019      	movs	r1, r3
 80033de:	0010      	movs	r0, r2
 80033e0:	f7fc fe90 	bl	8000104 <__udivsi3>
 80033e4:	0003      	movs	r3, r0
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	2b0f      	cmp	r3, #15
 80033ee:	d921      	bls.n	8003434 <UART_SetConfig+0x420>
 80033f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	025b      	lsls	r3, r3, #9
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d21c      	bcs.n	8003434 <UART_SetConfig+0x420>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	200e      	movs	r0, #14
 8003400:	2420      	movs	r4, #32
 8003402:	193b      	adds	r3, r7, r4
 8003404:	181b      	adds	r3, r3, r0
 8003406:	210f      	movs	r1, #15
 8003408:	438a      	bics	r2, r1
 800340a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	b29b      	uxth	r3, r3
 8003412:	2207      	movs	r2, #7
 8003414:	4013      	ands	r3, r2
 8003416:	b299      	uxth	r1, r3
 8003418:	193b      	adds	r3, r7, r4
 800341a:	181b      	adds	r3, r3, r0
 800341c:	193a      	adds	r2, r7, r4
 800341e:	1812      	adds	r2, r2, r0
 8003420:	8812      	ldrh	r2, [r2, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	193a      	adds	r2, r7, r4
 800342c:	1812      	adds	r2, r2, r0
 800342e:	8812      	ldrh	r2, [r2, #0]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	e062      	b.n	80034fa <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 8003434:	231a      	movs	r3, #26
 8003436:	2220      	movs	r2, #32
 8003438:	4694      	mov	ip, r2
 800343a:	44bc      	add	ip, r7
 800343c:	4463      	add	r3, ip
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	e05a      	b.n	80034fa <UART_SetConfig+0x4e6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003444:	231b      	movs	r3, #27
 8003446:	2220      	movs	r2, #32
 8003448:	4694      	mov	ip, r2
 800344a:	44bc      	add	ip, r7
 800344c:	4463      	add	r3, ip
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d015      	beq.n	8003480 <UART_SetConfig+0x46c>
 8003454:	dc18      	bgt.n	8003488 <UART_SetConfig+0x474>
 8003456:	2b04      	cmp	r3, #4
 8003458:	d00d      	beq.n	8003476 <UART_SetConfig+0x462>
 800345a:	dc15      	bgt.n	8003488 <UART_SetConfig+0x474>
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <UART_SetConfig+0x452>
 8003460:	2b02      	cmp	r3, #2
 8003462:	d005      	beq.n	8003470 <UART_SetConfig+0x45c>
 8003464:	e010      	b.n	8003488 <UART_SetConfig+0x474>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003466:	f7fe fafb 	bl	8001a60 <HAL_RCC_GetPCLK1Freq>
 800346a:	0003      	movs	r3, r0
 800346c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800346e:	e015      	b.n	800349c <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003470:	4b2f      	ldr	r3, [pc, #188]	; (8003530 <UART_SetConfig+0x51c>)
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003474:	e012      	b.n	800349c <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003476:	f7fe fa67 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 800347a:	0003      	movs	r3, r0
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800347e:	e00d      	b.n	800349c <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003486:	e009      	b.n	800349c <UART_SetConfig+0x488>
      default:
        pclk = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800348c:	231a      	movs	r3, #26
 800348e:	2220      	movs	r2, #32
 8003490:	4694      	mov	ip, r2
 8003492:	44bc      	add	ip, r7
 8003494:	4463      	add	r3, ip
 8003496:	2201      	movs	r2, #1
 8003498:	701a      	strb	r2, [r3, #0]
        break;
 800349a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800349c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d02b      	beq.n	80034fa <UART_SetConfig+0x4e6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034a6:	4b21      	ldr	r3, [pc, #132]	; (800352c <UART_SetConfig+0x518>)
 80034a8:	0052      	lsls	r2, r2, #1
 80034aa:	5ad3      	ldrh	r3, [r2, r3]
 80034ac:	0019      	movs	r1, r3
 80034ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034b0:	f7fc fe28 	bl	8000104 <__udivsi3>
 80034b4:	0003      	movs	r3, r0
 80034b6:	001a      	movs	r2, r3
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	18d2      	adds	r2, r2, r3
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	0019      	movs	r1, r3
 80034c6:	0010      	movs	r0, r2
 80034c8:	f7fc fe1c 	bl	8000104 <__udivsi3>
 80034cc:	0003      	movs	r3, r0
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d4:	2b0f      	cmp	r3, #15
 80034d6:	d909      	bls.n	80034ec <UART_SetConfig+0x4d8>
 80034d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	025b      	lsls	r3, r3, #9
 80034de:	429a      	cmp	r2, r3
 80034e0:	d204      	bcs.n	80034ec <UART_SetConfig+0x4d8>
      {
        huart->Instance->BRR = usartdiv;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	e006      	b.n	80034fa <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 80034ec:	231a      	movs	r3, #26
 80034ee:	2220      	movs	r2, #32
 80034f0:	4694      	mov	ip, r2
 80034f2:	44bc      	add	ip, r7
 80034f4:	4463      	add	r3, ip
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	226a      	movs	r2, #106	; 0x6a
 80034fe:	2101      	movs	r1, #1
 8003500:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	2268      	movs	r2, #104	; 0x68
 8003506:	2101      	movs	r1, #1
 8003508:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	2200      	movs	r2, #0
 800350e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	2200      	movs	r2, #0
 8003514:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003516:	231a      	movs	r3, #26
 8003518:	2220      	movs	r2, #32
 800351a:	4694      	mov	ip, r2
 800351c:	44bc      	add	ip, r7
 800351e:	4463      	add	r3, ip
 8003520:	781b      	ldrb	r3, [r3, #0]
}
 8003522:	0018      	movs	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	b010      	add	sp, #64	; 0x40
 8003528:	bdb0      	pop	{r4, r5, r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	080039e4 	.word	0x080039e4
 8003530:	00f42400 	.word	0x00f42400

08003534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	2201      	movs	r2, #1
 8003542:	4013      	ands	r3, r2
 8003544:	d00b      	beq.n	800355e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a4a      	ldr	r2, [pc, #296]	; (8003678 <UART_AdvFeatureConfig+0x144>)
 800354e:	4013      	ands	r3, r2
 8003550:	0019      	movs	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	2202      	movs	r2, #2
 8003564:	4013      	ands	r3, r2
 8003566:	d00b      	beq.n	8003580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4a43      	ldr	r2, [pc, #268]	; (800367c <UART_AdvFeatureConfig+0x148>)
 8003570:	4013      	ands	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	2204      	movs	r2, #4
 8003586:	4013      	ands	r3, r2
 8003588:	d00b      	beq.n	80035a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a3b      	ldr	r2, [pc, #236]	; (8003680 <UART_AdvFeatureConfig+0x14c>)
 8003592:	4013      	ands	r3, r2
 8003594:	0019      	movs	r1, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	2208      	movs	r2, #8
 80035a8:	4013      	ands	r3, r2
 80035aa:	d00b      	beq.n	80035c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4a34      	ldr	r2, [pc, #208]	; (8003684 <UART_AdvFeatureConfig+0x150>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	0019      	movs	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	2210      	movs	r2, #16
 80035ca:	4013      	ands	r3, r2
 80035cc:	d00b      	beq.n	80035e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4a2c      	ldr	r2, [pc, #176]	; (8003688 <UART_AdvFeatureConfig+0x154>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ea:	2220      	movs	r2, #32
 80035ec:	4013      	ands	r3, r2
 80035ee:	d00b      	beq.n	8003608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	4a25      	ldr	r2, [pc, #148]	; (800368c <UART_AdvFeatureConfig+0x158>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	0019      	movs	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	2240      	movs	r2, #64	; 0x40
 800360e:	4013      	ands	r3, r2
 8003610:	d01d      	beq.n	800364e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <UART_AdvFeatureConfig+0x15c>)
 800361a:	4013      	ands	r3, r2
 800361c:	0019      	movs	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	035b      	lsls	r3, r3, #13
 8003632:	429a      	cmp	r2, r3
 8003634:	d10b      	bne.n	800364e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4a15      	ldr	r2, [pc, #84]	; (8003694 <UART_AdvFeatureConfig+0x160>)
 800363e:	4013      	ands	r3, r2
 8003640:	0019      	movs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	2280      	movs	r2, #128	; 0x80
 8003654:	4013      	ands	r3, r2
 8003656:	d00b      	beq.n	8003670 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <UART_AdvFeatureConfig+0x164>)
 8003660:	4013      	ands	r3, r2
 8003662:	0019      	movs	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
  }
}
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}
 8003678:	fffdffff 	.word	0xfffdffff
 800367c:	fffeffff 	.word	0xfffeffff
 8003680:	fffbffff 	.word	0xfffbffff
 8003684:	ffff7fff 	.word	0xffff7fff
 8003688:	ffffefff 	.word	0xffffefff
 800368c:	ffffdfff 	.word	0xffffdfff
 8003690:	ffefffff 	.word	0xffefffff
 8003694:	ff9fffff 	.word	0xff9fffff
 8003698:	fff7ffff 	.word	0xfff7ffff

0800369c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	228c      	movs	r2, #140	; 0x8c
 80036a8:	2100      	movs	r1, #0
 80036aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036ac:	f7fd fa6e 	bl	8000b8c <HAL_GetTick>
 80036b0:	0003      	movs	r3, r0
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2208      	movs	r2, #8
 80036bc:	4013      	ands	r3, r2
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d10c      	bne.n	80036dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2280      	movs	r2, #128	; 0x80
 80036c6:	0391      	lsls	r1, r2, #14
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4a18      	ldr	r2, [pc, #96]	; (800372c <UART_CheckIdleState+0x90>)
 80036cc:	9200      	str	r2, [sp, #0]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f000 f82e 	bl	8003730 <UART_WaitOnFlagUntilTimeout>
 80036d4:	1e03      	subs	r3, r0, #0
 80036d6:	d001      	beq.n	80036dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e023      	b.n	8003724 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2204      	movs	r2, #4
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d10c      	bne.n	8003704 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2280      	movs	r2, #128	; 0x80
 80036ee:	03d1      	lsls	r1, r2, #15
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4a0e      	ldr	r2, [pc, #56]	; (800372c <UART_CheckIdleState+0x90>)
 80036f4:	9200      	str	r2, [sp, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f000 f81a 	bl	8003730 <UART_WaitOnFlagUntilTimeout>
 80036fc:	1e03      	subs	r3, r0, #0
 80036fe:	d001      	beq.n	8003704 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e00f      	b.n	8003724 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2284      	movs	r2, #132	; 0x84
 8003708:	2120      	movs	r1, #32
 800370a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2288      	movs	r2, #136	; 0x88
 8003710:	2120      	movs	r1, #32
 8003712:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	2100      	movs	r1, #0
 8003720:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	0018      	movs	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	b004      	add	sp, #16
 800372a:	bd80      	pop	{r7, pc}
 800372c:	01ffffff 	.word	0x01ffffff

08003730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b094      	sub	sp, #80	; 0x50
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	1dfb      	adds	r3, r7, #7
 800373e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003740:	e0a7      	b.n	8003892 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003744:	3301      	adds	r3, #1
 8003746:	d100      	bne.n	800374a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003748:	e0a3      	b.n	8003892 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374a:	f7fd fa1f 	bl	8000b8c <HAL_GetTick>
 800374e:	0002      	movs	r2, r0
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003756:	429a      	cmp	r2, r3
 8003758:	d302      	bcc.n	8003760 <UART_WaitOnFlagUntilTimeout+0x30>
 800375a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800375c:	2b00      	cmp	r3, #0
 800375e:	d13f      	bne.n	80037e0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003760:	f3ef 8310 	mrs	r3, PRIMASK
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003768:	647b      	str	r3, [r7, #68]	; 0x44
 800376a:	2301      	movs	r3, #1
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	f383 8810 	msr	PRIMASK, r3
}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	494e      	ldr	r1, [pc, #312]	; (80038bc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003782:	400a      	ands	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	f383 8810 	msr	PRIMASK, r3
}
 8003790:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003792:	f3ef 8310 	mrs	r3, PRIMASK
 8003796:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379a:	643b      	str	r3, [r7, #64]	; 0x40
 800379c:	2301      	movs	r3, #1
 800379e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a2:	f383 8810 	msr	PRIMASK, r3
}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2101      	movs	r1, #1
 80037b4:	438a      	bics	r2, r1
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037be:	f383 8810 	msr	PRIMASK, r3
}
 80037c2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2284      	movs	r2, #132	; 0x84
 80037c8:	2120      	movs	r1, #32
 80037ca:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2288      	movs	r2, #136	; 0x88
 80037d0:	2120      	movs	r1, #32
 80037d2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2280      	movs	r2, #128	; 0x80
 80037d8:	2100      	movs	r1, #0
 80037da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e069      	b.n	80038b4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2204      	movs	r2, #4
 80037e8:	4013      	ands	r3, r2
 80037ea:	d052      	beq.n	8003892 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	2380      	movs	r3, #128	; 0x80
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	401a      	ands	r2, r3
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d148      	bne.n	8003892 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2280      	movs	r2, #128	; 0x80
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800380a:	f3ef 8310 	mrs	r3, PRIMASK
 800380e:	613b      	str	r3, [r7, #16]
  return(result);
 8003810:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003814:	2301      	movs	r3, #1
 8003816:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f383 8810 	msr	PRIMASK, r3
}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4924      	ldr	r1, [pc, #144]	; (80038bc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800382c:	400a      	ands	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003832:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f383 8810 	msr	PRIMASK, r3
}
 800383a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800383c:	f3ef 8310 	mrs	r3, PRIMASK
 8003840:	61fb      	str	r3, [r7, #28]
  return(result);
 8003842:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003844:	64bb      	str	r3, [r7, #72]	; 0x48
 8003846:	2301      	movs	r3, #1
 8003848:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f383 8810 	msr	PRIMASK, r3
}
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2101      	movs	r1, #1
 800385e:	438a      	bics	r2, r1
 8003860:	609a      	str	r2, [r3, #8]
 8003862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	f383 8810 	msr	PRIMASK, r3
}
 800386c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2284      	movs	r2, #132	; 0x84
 8003872:	2120      	movs	r1, #32
 8003874:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2288      	movs	r2, #136	; 0x88
 800387a:	2120      	movs	r1, #32
 800387c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	228c      	movs	r2, #140	; 0x8c
 8003882:	2120      	movs	r1, #32
 8003884:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2280      	movs	r2, #128	; 0x80
 800388a:	2100      	movs	r1, #0
 800388c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e010      	b.n	80038b4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	4013      	ands	r3, r2
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	425a      	negs	r2, r3
 80038a2:	4153      	adcs	r3, r2
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	001a      	movs	r2, r3
 80038a8:	1dfb      	adds	r3, r7, #7
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d100      	bne.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x182>
 80038b0:	e747      	b.n	8003742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	0018      	movs	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b014      	add	sp, #80	; 0x50
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	fffffe5f 	.word	0xfffffe5f

080038c0 <__libc_init_array>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	2600      	movs	r6, #0
 80038c4:	4d0c      	ldr	r5, [pc, #48]	; (80038f8 <__libc_init_array+0x38>)
 80038c6:	4c0d      	ldr	r4, [pc, #52]	; (80038fc <__libc_init_array+0x3c>)
 80038c8:	1b64      	subs	r4, r4, r5
 80038ca:	10a4      	asrs	r4, r4, #2
 80038cc:	42a6      	cmp	r6, r4
 80038ce:	d109      	bne.n	80038e4 <__libc_init_array+0x24>
 80038d0:	2600      	movs	r6, #0
 80038d2:	f000 f821 	bl	8003918 <_init>
 80038d6:	4d0a      	ldr	r5, [pc, #40]	; (8003900 <__libc_init_array+0x40>)
 80038d8:	4c0a      	ldr	r4, [pc, #40]	; (8003904 <__libc_init_array+0x44>)
 80038da:	1b64      	subs	r4, r4, r5
 80038dc:	10a4      	asrs	r4, r4, #2
 80038de:	42a6      	cmp	r6, r4
 80038e0:	d105      	bne.n	80038ee <__libc_init_array+0x2e>
 80038e2:	bd70      	pop	{r4, r5, r6, pc}
 80038e4:	00b3      	lsls	r3, r6, #2
 80038e6:	58eb      	ldr	r3, [r5, r3]
 80038e8:	4798      	blx	r3
 80038ea:	3601      	adds	r6, #1
 80038ec:	e7ee      	b.n	80038cc <__libc_init_array+0xc>
 80038ee:	00b3      	lsls	r3, r6, #2
 80038f0:	58eb      	ldr	r3, [r5, r3]
 80038f2:	4798      	blx	r3
 80038f4:	3601      	adds	r6, #1
 80038f6:	e7f2      	b.n	80038de <__libc_init_array+0x1e>
 80038f8:	08003a04 	.word	0x08003a04
 80038fc:	08003a04 	.word	0x08003a04
 8003900:	08003a04 	.word	0x08003a04
 8003904:	08003a08 	.word	0x08003a08

08003908 <memset>:
 8003908:	0003      	movs	r3, r0
 800390a:	1882      	adds	r2, r0, r2
 800390c:	4293      	cmp	r3, r2
 800390e:	d100      	bne.n	8003912 <memset+0xa>
 8003910:	4770      	bx	lr
 8003912:	7019      	strb	r1, [r3, #0]
 8003914:	3301      	adds	r3, #1
 8003916:	e7f9      	b.n	800390c <memset+0x4>

08003918 <_init>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr

08003924 <_fini>:
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392a:	bc08      	pop	{r3}
 800392c:	469e      	mov	lr, r3
 800392e:	4770      	bx	lr
